import numpy as np
import matplotlib.pyplot as plt
import pickle
import matplotlib.gridspec as gridspec
from mpl_toolkits.mplot3d import Axes3D
from matplotlib.ticker import MaxNLocator
from matplotlib.patches import Patch
from matplotlib.lines import Line2D


# Plot errors between m_{k+1} and m_k and similarly for the model coefficients
def make_progress_plots(r, sindy_opt):
    W = np.asarray(sindy_opt.history_)
    M = np.asarray(sindy_opt.m_history_)
    dW = np.zeros(W.shape[0])
    dM = np.zeros(M.shape[0])
    for i in range(1,W.shape[0]):
        dW[i] = np.sum((W[i, :, :] - W[i - 1, :, :]) ** 2)
        dM[i] = np.sum((M[i, :] - M[i - 1, :]) ** 2)
    plt.figure()
    print(dW.shape, dM.shape)
    plt.semilogy(dW, label=r'Coefficient progress, $\|\xi_{k+1} - \xi_k\|_2^2$')
    plt.semilogy(dM, label=r'Vector m progress, $\|m_{k+1} - m_k\|_2^2$')
    plt.xlabel('Algorithm iterations', fontsize=16)
    plt.ylabel('Errors', fontsize=16)
    plt.legend(fontsize=14)
    PWeigs = np.asarray(sindy_opt.PWeigs_history_)
    plt.figure()
    for j in range(r):
        if np.all(PWeigs[:, j] > 0.0):
            plt.semilogy(PWeigs[:, j],
                         label=r'diag($P\xi)_{' + str(j) + str(j) + '}$')
        else:
            plt.plot(PWeigs[:, j],
                     label=r'diag($P\xi)_{' + str(j) + str(j) + '}$')
        plt.xlabel('Algorithm iterations', fontsize=16)
        plt.legend(fontsize=12)
        plt.ylabel(r'Eigenvalues of $P\xi$', fontsize=16)

# Plot first three modes in 3D for ground truth and SINDy prediction
def make_3d_plots(x_test, x_test_pred, filename):
    fig, ax = plt.subplots(1, 1, subplot_kw={'projection': '3d'}, figsize=(8, 8))
    if filename == 'VonKarman':
        ind = -1
    else:
        ind = 2
    plt.plot(x_test[:, 0], x_test[:, 1], x_test[:, ind],
             'r', label='true x')
    plt.plot(x_test_pred[:, 0], x_test_pred[:, 1], x_test_pred[:, ind],
             'k', label='pred x')
    ax = plt.gca()
    ax.set_xticklabels([])
    ax.set_yticklabels([])
    ax.set_zticklabels([])
    ax.set_axis_off()
    plt.legend(fontsize=14)
    plt.show()

# Plot the SINDy fits of X and Xdot against the ground truth
def make_fits(r, t, xdot_test, xdot_og_test, xdot_test_pred, x_test, x_og_test, x_test_pred, title):
    if r >= 3:
        r = 3
    fig, ax = plt.subplots(nrows=r, ncols=2, sharex='all', figsize=(14,8))
    fig.subplots_adjust(hspace=0, wspace=0)
    for i in range(r):
        ax[i,0].plot(t, xdot_og_test[:, i], 'b-', label=r'true $\dot{x}_' + str(i) + '$')
        ax[i,0].plot(t, xdot_test[:, i], 'r', label=r'true+noise $\dot{x}_' + str(i) + '$', linewidth=0.9)
        ax[i,0].plot(t, xdot_test_pred[:, i], 'k--', label=r'pred $\dot{x}_' + str(i) + '$')
        ax[i,0].grid(True)
        ax[i,0].legend(fontsize=10, loc=1)
        ax[i,1].plot(t, x_og_test[:, i], 'b-', label=r'true $x_' + str(i) + '$')
        ax[i,1].plot(t, x_test[:, i], 'r', label=r'true+noise $x_' + str(i) + '$', linewidth=0.9)
        ax[i,1].plot(t, x_test_pred[:, i], 'k--', label=r'pred $x_' + str(i) + '$')
        ax[i,1].grid(True)
        ax[i,1].yaxis.tick_right()
        ax[i,1].legend(fontsize=10, loc=2)
        if i == 0:
            ax[i, 0].set_title(r'$dx_i/dt$', fontsize=15)
            ax[i, 1].set_title(r'$x_i$', fontsize=15)
        if i == r - 1:
            ax[i,0].set_xlabel('t', fontsize=15)
            ax[i,1].set_xlabel('t', fontsize=15)
    fig.suptitle(title, fontsize=14)

    plt.show()

# Make Lissajou figures with ground truth and SINDy model
def make_lissajou(r, x_train, x_test, x_train_pred, x_test_pred, title):
    if r >= 4:
        r = 4
    fig, ax = plt.subplots(nrows=r, ncols=r, sharex='all', sharey='all', figsize=(10,10))
    fig.subplots_adjust(hspace=0, wspace=0)
    for i in range(r):
        for j in range(i, r):
            ax[i,j].plot(x_train[:, i], x_train[:, j], 'k', lw=1, label=r'train true')
            ax[i,j].plot(x_train_pred[:, i], x_train_pred[:, j], 'b', lw=1, label=r'train pred')
            ax[i,j].grid(True)
            if j == 0:
                ax[i,j].set_ylabel(r'$x_' + str(i) + r'$', fontsize=15)
            if i == r - 1:
                ax[i,j].set_xlabel(r'$x_' + str(j) + r'$', fontsize=15)

        for j in range(i):
            ax[i,j].plot(x_test[:, j], x_test[:, i], 'k', lw=1, label=r'test true')
            ax[i,j].plot(x_test_pred[:, j], x_test_pred[:, i], 'r', lw=1, label=r'test pred')
            ax[i,j].grid(True)
            if j == 0:
                ax[i,j].set_ylabel(r'$x_' + str(i) + r'$', fontsize=15)
            if i == r - 1:
                ax[i,j].set_xlabel(r'$x_' + str(j) + r'$', fontsize=15)

    legend_elements = [Line2D([0], [0], color='k', lw=1, label='og. + noise'),
                       Line2D([0], [0], color='b', lw=1, label='Train pred'),
                       Line2D([0], [0], color='r', lw=1, label='Test pred'),]
    ax[0,0].legend(handles=legend_elements, loc='center', fontsize=14)
    fig.suptitle(title, fontsize=14)

    plt.show()


######################################################################################
######################################################################################
######################################################################################

# Initialize integrator keywords for solve_ivp to replicate the odeint defaults
integrator_keywords = {}
integrator_keywords['rtol'] = 1e-15
integrator_keywords['method'] = 'LSODA'
integrator_keywords['atol'] = 1e-10
#integrator_keywords['min_step'] = 1e-7

# Seed for reproducibility
np.random.seed(1000)

pars = {'N' : 20,
        'K' : 2,
        'F' : 30
        }

N = pars['N']
K = pars['K']
F = pars['F']
x = np.arange(N)

# Load evaluated Lorenz model 3
# with open('data/L05_2_{}.pkl'.format(pars), 'rb') as inp:
#     L = pickle.load(inp) # Lorenz_model_3_evaluated
#     L.print_parameters()
#
#     #eval_path_num = -1
#     #eval_path = L.evaluation_paths[eval_path_num]

#eval_path = 'data/eval_[20, 2, 30, 0.001, 100]_4299de3d3cb0f6d35708b262c6b159cebd7dc394.pkl'
eval_path = "data/eval_[20, 2, 30, 0.001, 10000]_d70a3db09d46e5f3472bf12b4303610c042d5df4.pkl"

# with open(eval_path, 'rb') as L05_2_inp_eval:
#     ev = pickle.load(L05_2_inp_eval)
#     #print(ev)
#
#     r = {'eval_path': eval_path,
#          'mi': np.min(ev.y.T),
#          'ma': np.max(ev.y.T),
#          'av': np.average(ev.y.T),
#          'st': np.std(ev.y.T),
#          }
#
#     for i,j in r.items():
#         print(i,': ',j)
#
#     del L05_2_inp_eval
#
# eval_path = "data/eval_{'N': 240, 'K': 24, 'F': 30, 'dt': 0.001, 't1': 1000.0}_00ba0de0e829596a97d16544e09c6c1a6a04d630_1659081529.4068346.pkl"
# with open("data/eval_[240, 24, 30, 0.001, 100]_f6a0c5a21a53e9dce0bcb42d48e497e5863ff7ac.pkl", 'rb') as L05_2_inp_eval:
#     ev2 = pickle.load(L05_2_inp_eval)
#     # ev2
#
#     r = {'eval_path': eval_path,
#          'mi': np.min(ev2.y.T),
#          'ma': np.max(ev2.y.T),
#          'av': np.average(ev2.y.T),
#          'st': np.std(ev2.y.T),
#          }
#
#     for i,j in r.items():
#         print(i,': ',j)
#
#     del L05_2_inp_eval



# ######### First some trajectories #########
if False:
    # for d = 20
    # t = ev.t
    # Z1 = ev.y.T
    # plt.figure(figsize=(12, 6))
    # plt.title('d={}, K={}, F={}'.format(N,K,F))
    # plt.xlabel('t')
    # num_of_comps = 20
    # l = 10000
    # spacing = 30
    # for i in range(num_of_comps):
    #     plt.plot(t[:l], Z1[:l, i] + spacing * i)
    #     plt.plot(t[:l], np.asarray([0 for i in range(l)]) + spacing*i, color='black', linewidth=0.5)
    # plt.yticks([i*spacing for i in range(num_of_comps)], [r'$Z_{' + str(i) + '}$' for i in range(0,20)])
    # plt.grid(True)
    # plt.show()
    # For N = 240
    t = ev.t
    Z1 = ev.y.T
    plt.figure(figsize=(12, 6))
    plt.title('d=240, K={}, F={}'.format(K,F))
    plt.xlabel('t')
    num_of_comps = 20
    l = 10000
    spacing = 30
    #for i in range(num_of_comps):
    for i in range(0,240,12):
        plt.plot(t[:l], Z1[:l, i] * 10 + spacing * i)
        plt.plot(t[:l], np.asarray([0 for i in range(l)]) + spacing*i, color='black', linewidth=0.5)
    plt.yticks([i*spacing*12 for i in range(num_of_comps)], [r'$Z_{' + str(i) + '}$' for i in range(0,239,12)])
    plt.grid(True)
    plt.show()
# ######### Profiles #####################
if False:
    t = ev.t
    dt = t[1] - t[0]
    time_spasing = 0.03
    every_time_instant = int(time_spasing/dt)
    Z1 = ev.y.T
    plt.figure(figsize=(6, 8))
    plt.title('N={}, K={}, F={}'.format(N,K,F))
    plt.xlabel(r'$i$')
    plt.ylabel(r'$t$')
    c = 0
    for i in range(10000, len(t)):
        if i % every_time_instant == 0:
            plt.plot(x, Z1[i, :] - 10 * c)
            c+=1
            if c == 100:
                break
    plt.grid(True)
    locs = plt.yticks()[0]
    plt.yticks(locs, np.abs(locs * time_spasing), rotation=45)
    plt.show()
    ###### Average of all trajectories #########
    t = ev.t
    x0 = np.sum(ev.y.T, axis=-1) / len(ev.y.T[0])
    # plt.figure(figsize=(5, 4))
    plt.title('Average of all components of the trajectory')
    plt.xlabel('t')
    plt.ylabel(r'$\sum_iZ_{i}$')
    plt.plot(t, x0)
    plt.grid(True)
    plt.show()
####### Profiles Heatmap #################
if False:
    t = ev.t
    dt = t[1] - t[0]
    time_spasing = 0.005
    every_time_instant = int(time_spasing/dt)
    Z1 = ev.y.T

    Z2 = ev2.y.T
    if ev2.t[1] - ev2.t[0] != dt:
        raise ValueError('dt1 and dt2 are not the same')

    a1 = []
    a2 = []
    l = 15000
    lz1 = len(Z1)
    lz2 = len(Z2)
    for i in range(l):
        if i%every_time_instant==0:
            #a.append([1,2,3,4,5,6,7,8,9])
            a1.append(Z1[lz1 - l + i])
            a2.append(Z2[lz2 - l + i])

    plt.figure(figsize=(10,4))
    ax = plt.subplot(211)
    plt.imshow(np.asarray(a1).T, aspect=30)#, cmap=plt.cm.gist_ncar)
    plt.subplot(212)
    plt.imshow(np.asarray(a2).T, aspect=2.5)#, cmap=plt.cm.gist_ncar)

    ax.set_xticks([])
    ticks = [i for i in range(0,int(l/every_time_instant), 500)]
    labels = [i*time_spasing for i in range(0,int(l/every_time_instant), 500)]
    plt.xticks(ticks, labels)

    plt.xlabel('t', fontsize=15)

    plt.subplots_adjust(bottom=0.3, right=1.0, left=0.0, top=0.99, hspace=0)
    cax = plt.axes([0.15,0.06,0.7,0.1]) #[0.85, 0.1, 0.075, 0.8])
    plt.colorbar(cax=cax, orientation='horizontal')


    plt.show()
###### Average of all trajectories #########
if False:
    t = ev.t
    x0 = np.sum(ev.y.T, axis=-1) / len(ev.y.T[0])
    # plt.figure(figsize=(5, 4))
    plt.title('Average of all components of the trajectory')
    plt.xlabel('t')
    plt.ylabel(r'$\sum_iZ_{i}$')
    plt.plot(t, x0)
    plt.grid(True)
    plt.show()
########### Crossplots ###################
if False:
    r = 5
    y = ev.y.T[len((ev.y.T))-100000:len((ev.y.T))]
    x_train_pred = y
    x_test_pred = y
    #make_lissajou(r, y, np.asarray([[]]), y, y, '')
    fig = plt.figure(figsize=(10, 10))
    spec = gridspec.GridSpec(ncols=r, nrows=r, figure=fig, hspace=0.0, wspace=0.0)
    for i in range(r):
        for j in range(i, r):
            # plt.subplot(spec[i, j])
            # plt.plot(x_train_pred[:, i], x_train_pred[:, j], 'k-', linewidth=1)
            # ax = plt.gca()
            # ax.set_xticks([])
            # ax.set_yticks([])
            if j == 0:
                plt.ylabel(r'$x_' + str(i) + r'$', fontsize=18)
            if i == r - 1:
                plt.xlabel(r'$x_' + str(j) + r'$', fontsize=18)
        for j in range(i):
            plt.subplot(spec[i, j])
            plt.plot(x_test_pred[:, j], x_test_pred[:, i], 'k-', linewidth=0.8)
            ax = plt.gca()
            ax.set_xticks([])
            ax.set_yticks([])
            if j == 0:
                plt.ylabel(r'$x_' + str(i) + r'$', fontsize=18)
            if i == r - 1:
                plt.xlabel(r'$x_' + str(j) + r'$', fontsize=18)
    plt.show()
# ############ PSD #######################
if False:
    freqs = L.PSD[-1]['freqs']
    psd = L.PSD[-1]['psd']
    freqs1 = L.PSD[-2]['freqs']
    psd1 = L.PSD[-2]['psd']
    plt.figure(figsize=(8, 4))
    plt.loglog(freqs1,psd1, label=r'$t_{stop}=10^3$', linewidth='0.99')
    plt.loglog(freqs,psd, label=r'$t_{stop}=10^4$',)
    plt.title('PSD: N={},K={},F={}'.format(N,K,F))
    plt.xlabel('Frequency')
    plt.ylabel('Power')
    plt.legend()
    plt.tight_layout()
    plt.grid(True)
    plt.show()
# ######### Moments ######################
if False:
    # k_arr = L.moments[-1]['k_arr']
    # mom_arr = L.moments[-1]['mom_arr']
    # print(k_arr)
    # print(mom_arr)

    # OG model N=20, K=2, F=30, dt=0.001, t_stop=1e4
    k_arr = [0.01      , 0.01047616, 0.01097499, 0.01149757, 0.01204504,
       0.01261857, 0.01321941, 0.01384886, 0.01450829, 0.01519911,
       0.01592283, 0.01668101, 0.01747528, 0.01830738, 0.0191791 ,
       0.02009233, 0.02104904, 0.02205131, 0.0231013 , 0.02420128,
       0.02535364, 0.02656088, 0.02782559, 0.02915053, 0.03053856,
       0.03199267, 0.03351603, 0.03511192, 0.0367838 , 0.03853529,
       0.04037017, 0.04229243, 0.04430621, 0.04641589, 0.04862602,
       0.05094138, 0.05336699, 0.0559081 , 0.05857021, 0.06135907,
       0.06428073, 0.06734151, 0.07054802, 0.07390722, 0.07742637,
       0.08111308, 0.08497534, 0.08902151, 0.09326033, 0.097701  ,
       0.1023531 , 0.10722672, 0.1123324 , 0.1176812 , 0.12328467,
       0.12915497, 0.13530478, 0.14174742, 0.14849683, 0.15556761,
       0.16297508, 0.17073526, 0.17886495, 0.18738174, 0.19630407,
       0.20565123, 0.21544347, 0.22570197, 0.23644894, 0.24770764,
       0.25950242, 0.27185882, 0.28480359, 0.29836472, 0.31257158,
       0.32745492, 0.34304693, 0.35938137, 0.37649358, 0.39442061,
       0.41320124, 0.43287613, 0.45348785, 0.47508102, 0.49770236,
       0.52140083, 0.54622772, 0.57223677, 0.59948425, 0.62802914,
       0.65793322, 0.68926121, 0.7220809 , 0.75646333, 0.7924829 ,
       0.83021757, 0.869749  , 0.91116276, 0.95454846, 1.        ]
    mom_arr = [9.95279930e-01, 9.94820892e-01, 9.94317336e-01, 9.93764970e-01,
                      9.93159093e-01, 9.92494558e-01, 9.91765730e-01, 9.90966443e-01,
                      9.90089948e-01, 9.89128867e-01, 9.88075127e-01, 9.86919908e-01,
                      9.85653571e-01, 9.84265591e-01, 9.82744477e-01, 9.81077693e-01,
                      9.79251571e-01, 9.77251218e-01, 9.75060416e-01, 9.72661525e-01,
                      9.70035366e-01, 9.67161115e-01, 9.64016184e-01, 9.60576102e-01,
                      9.56814392e-01, 9.52702452e-01, 9.48209437e-01, 9.43302141e-01,
                      9.37944900e-01, 9.32099491e-01, 9.25725064e-01, 9.18778089e-01,
                      9.11212342e-01, 9.02978920e-01, 8.94026325e-01, 8.84300595e-01,
                      8.73745521e-01, 8.62302956e-01, 8.49913237e-01, 8.36515740e-01,
                      8.22049581e-01, 8.06454506e-01, 7.89671976e-01, 7.71646478e-01,
                      7.52327085e-01, 7.31669285e-01, 7.09637097e-01, 6.86205464e-01,
                      6.61362940e-01, 6.35114628e-01, 6.07485332e-01, 5.78522844e-01,
                      5.48301262e-01, 5.16924178e-01, 4.84527545e-01, 4.51281975e-01,
                      4.17394164e-01, 3.83107100e-01, 3.48698689e-01, 3.14478402e-01,
                      2.80781608e-01, 2.47961311e-01, 2.16377173e-01, 1.86381925e-01,
                      1.58305567e-01, 1.32438153e-01, 1.09012358e-01, 8.81874572e-02,
                      7.00366861e-02, 5.45400531e-02, 4.15845361e-02, 3.09729703e-02,
                      2.24418725e-02, 1.56869516e-02, 1.03933430e-02, 6.26605869e-03,
                      3.05528411e-03, 5.71507238e-04, -1.31262795e-03, -2.67354958e-03,
                      -3.55699235e-03, -4.00015512e-03, -4.04817068e-03, -3.76012357e-03,
                      -3.20530237e-03, -2.45569397e-03, -1.58230055e-03, -6.58703373e-04,
                      2.32446085e-04, 9.99554036e-04, 1.55549274e-03, 1.84097671e-03,
                      1.84603506e-03, 1.61824981e-03, 1.25363882e-03, 8.71315116e-04,
                      5.75194641e-04, 4.11517989e-04, 3.41561546e-04, 2.62317058e-04]
    plt.figure(figsize=(8, 4))
    plt.semilogx(k_arr, mom_arr, 'k-', label='original')
    #plt.plot(k_arr, mom_arr, 'k-', label='original')
    plt.title(r'N=20, K=2, F=30, $dt=0.001$, $t_{stop}=10^5$')
    plt.xlabel('k')
    plt.ylabel(r'$<Re[e^{ikx}]>$')
    plt.tight_layout()
    plt.grid(True)
    plt.show()
# ####### Mutual information #############
if False:
    # time_delays = L.mutual_information[-1]['time_delays'] #
    # mutual_info = L.mutual_information[-1]['mutual_info']
    # partitions = L.mutual_information[-1]['partition_num']

    N=20
    K=2
    F=30
    # dt=0.001, t_stop=1e5
    time_delays = [0.  , 0.05, 0.1 , 0.15, 0.2 , 0.25, 0.3 , 0.35, 0.4 , 0.45, 0.5 ,
           0.55, 0.6 , 0.65, 0.7 , 0.75, 0.8 , 0.85, 0.9 , 0.95, 1.  , 1.05,
           1.1 , 1.15, 1.2 , 1.25, 1.3 , 1.35, 1.4 , 1.45, 1.5 , 1.55, 1.6 ,
           1.65, 1.7 , 1.75, 1.8 , 1.85, 1.9 , 1.95]
    mutual_info = [3.94554878, 1.00170371, 0.41990131, 0.16923123, 0.05698495,
           0.01367164, 0.00853338, 0.02466706, 0.05031027, 0.0742162 ,
           0.08441181, 0.07602703, 0.05803708, 0.03977697, 0.02510271,
           0.01545614, 0.00997576, 0.00759714, 0.00704224, 0.00715557,
           0.00765196, 0.00796015, 0.00781718, 0.00744273, 0.00673509,
           0.00611139, 0.00577022, 0.00518601, 0.00474049, 0.00450616,
           0.00444207, 0.00447962, 0.00442018, 0.00433055, 0.00447993,
           0.00463597, 0.00458632, 0.00463973, 0.00459044, 0.00474314]
    partitions=100
    plt.figure(figsize=(8, 4))
    plt.semilogy(time_delays, mutual_info)
    #plt.plot(time_delays, mutual_info)
    plt.title('N={}, K={}, F={}, partitions={}'.format(N,K,F,partitions))
    plt.xlabel(r'$\tau$')
    plt.ylabel(r'$I(\tau)$')
    plt.tight_layout()
    plt.grid(True)
    plt.show()
# ############## FNNv1 ######################
if False:
    d_arr = L.FNN_v1[-1]['d_arr']
    fnn = L.FNN_v1[-1]['fnn']
    print(d_arr)
    print(fnn)

    plt.figure(figsize=(8, 4))

    N = 20
    K = 2
    F = 30
    dt = 0.5
    t_stop = 1000

    d_arr = [1, 2, 3, 4, 5, 6, 7]
    fnn = [0.99896907, 0.94536082, 0.61701031, 0.18608247, 0.02525773, 0.00206186,  0.]
    plt.plot(d_arr, fnn, label='R=10, A=1')

    d_arr = [1, 2, 3, 4, 5, 6, 7, 8]
    fnn = [0.99896907, 0.97164948, 0.76597938, 0.37989691, 0.10206186, 0.01185567, 0.00103093, 0.        ]
    plt.plot(d_arr, fnn, label='R=5, A=1')

    d_arr = [1, 2, 3, 4, 5, 6]
    fnn = [0.9989690721649485, 0.9257731958762887, 0.5154639175257731, 0.09278350515463918, 0.004639175257731959, 0]
    plt.plot(d_arr, fnn, label='R=15, A=1')

    d_arr = [1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12]
    fnn = [1.,  0.99484536, 0.93453608, 0.81030928, 0.58814433, 0.35876289, 0.21391753, 0.08865979, 0.02989691, 0.01082474, 0.00463918, 0.]
    plt.plot(d_arr, fnn, label='R=1, A=1')

    d_arr = [1,  2,  3,  4,  5]
    fnn = [0.9979381443298969, 0.7221649484536082, 0.08556701030927835, 0.002061855670103093, 0]
    plt.plot(d_arr, fnn, label='R=100, A=1')


    plt.title('N={}, K={}, F={}, dt={},'.format(N, K, F, dt) + r' $t_{stop}$' + '={}'.format(t_stop))
    plt.xlabel(r'$d$')
    plt.legend()
    plt.tight_layout()
    plt.grid(True)
    plt.show()
if False:
    d_arr = L.FNN_v1[-1]['d_arr']
    fnn = L.FNN_v1[-1]['fnn']
    print(d_arr)
    print(fnn)

    plt.figure(figsize=(8, 4))

    N = 20
    K = 2
    F = 30
    dt = 0.5
    t_stop = 1000

    d_arr = [1, 2, 3, 4, 5, 6, 7]
    fnn = [0.99896907, 0.95206186, 0.5943299,  0.19020619, 0.03659794, 0.00206186, 0]
    plt.plot(d_arr, fnn, label=r'R=10, A=1, $\mu=0.5$')




    plt.title('N={}, K={}, F={}, dt={},'.format(N, K, F, dt) + r'$t_{stop}$' + '={}'.format(t_stop))
    plt.xlabel(r'$d$')
    plt.legend()
    plt.tight_layout()
    plt.grid(True)
    plt.show()
# ############## FNNv2 ######################
if False:
    # d_arr = L.FNN_v2[-1]['d_arr']
    # E1_arr = L.FNN_v2[-1]['E1_arr']
    # E2_arr = L.FNN_v2[-1]['E2_arr']
    plt.figure(figsize=(8, 4))

    N = 20
    K = 2
    F = 30
    dt = 0.5
    t_stop = 1000
    noise = 0

    d_arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]
    E1_arr = [8.392368317629976e-08, 0.009465797459538764, 0.2312082075188103, 0.5920720040476023, 0.9302925598725371, 0.9897960700620929, 0.9973305559683578, 0.9982024121343188, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
    E2_arr = [1.0261142710161815, 1.1683240927743457, 1.709622373540741, 1.9553799234074098, 1.7492340537197593, 1.5609795360108574, 1.4238200291882552, 1.3446236469719774, 1.2810076022184511, 1.237349904048795, 1.2112504829774544, 1.1805526645394584, 1.1561039268519824, 1.1450737485759335, 1.130904397819511, 1.1191150504626715, 1.1114287344528166, 1.1050049349909135, 1.0957794444188267, 1.0877011279287778, 1.083604149582987]
    plt.plot(d_arr, E1_arr, label=r'E1, norm=l2, just random')
    plt.plot(d_arr, E2_arr, label='E2, norm=sup')

    d_arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]
    E1_arr = [3.96510160550878e-05, 0.0004965458184667714, 0.1331099534486731, 0.3826151691856415, 0.5955326648135326, 0.7844335246054885, 0.9246499313467322, 0.9789593447430676, 0.9943555254711582, 0.9996409560255343, 0.9995659528676641, 0.9999691906419477, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
    E2_arr = [1.0059518233153533, 1.0268921457233295, 1.0104687663166323, 1.2229884390558408, 1.3255122534917838, 1.4146523318691426, 1.3980622278411712, 1.33072293536327, 1.2795778690762039, 1.243686045886397, 1.2044603944747223, 1.179959484877105, 1.1619889722862742, 1.1497276655047586, 1.1342978840871973, 1.120668803156855, 1.1108383141829061, 1.1015849406123286, 1.0933734488192988, 1.0894905284801273, 1.0835498670503088]
    plt.plot(d_arr, E1_arr, label=r'E1, norm=l2, $\mu=1$')
    plt.plot(d_arr, E2_arr, label='E2, norm=sup')


    d_arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]
    E1_arr = [0.005730516929240557, 0.23379091234432078, 0.4650786168729808, 0.6341301489025422, 0.7836433960130365, 0.8478029753929941, 0.8784283704389336, 0.9044456673540923, 0.9229004786870008, 0.9541926959901529, 0.9569160416164004, 0.9736734214211974, 0.9729819224334219, 0.9822111052023921, 0.9831756719587504, 0.9775708241226779, 0.9720739320248947, 0.9881531075410006, 0.98773420270742, 0.9823503658408307, 0.9922457392173323]
    E2_arr = [0.9788573638657364, 1.0255969132376015, 1.00484393834044, 0.9914872288361314, 1.0448168024599185, 1.0408548695835291, 1.0342486789463627, 1.019412098583576, 1.0181223625117752, 1.0286984858048072, 1.0249853942625984, 1.0296842469489718, 1.023365201134003, 1.0303078732207092, 1.0286150484361187, 1.013958752349228, 1.0072856732386124, 1.018641840920398, 1.0161819496665243, 1.0068710829883258, 1.013956012548923]
    plt.plot(d_arr, E1_arr, label='E1, norm=sup, $\mu=0$')
    plt.plot(d_arr, E2_arr, label='E2, norm=sup')

    d_arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]
    E1_arr = [1.8667503721762843e-06, 0.03705111432592039, 0.10693210085209343, 0.3409819692579625, 0.5755022119173937, 0.8022333289550143, 0.9060958664367433, 0.9741726532478397, 0.9868289687559884, 0.9980251838750966, 0.9980097406749605, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
    E2_arr = [0.9638387434756986, 1.0250383866898887, 1.0538548780415995, 1.1292194682614154, 1.3129069307065926, 1.3892077315476323, 1.3701440638350229, 1.3280495523446225, 1.284763836562155, 1.2405006062806252, 1.2093705102468975, 1.1806727994750703, 1.1647226995990243, 1.1481659985139046, 1.1329316773323534, 1.1218217261298864, 1.1089524146787795, 1.0991530304679684, 1.0943456055337684, 1.0912374654316666, 1.0834488071530606]
    plt.plot(d_arr, E1_arr, label=r'E1, norm=$l_2$, $\mu=0$')
    plt.plot(d_arr, E2_arr, label='E2, norm=l2')


    plt.title('N={}, K={}, F={}, dt={},'.format(N,K,F,dt) +  r'$t_{stop}$' + r'={}, $\mu$={}'.format(t_stop, noise))
    plt.xlabel(r'$d$')
    plt.legend()
    plt.tight_layout()
    plt.grid(True)
    plt.show()
# ############## FNNv3 ######################
if False:
    # d_arr = L.FNN_v3[-1]['d_arr']
    # fnn = L.FNN_v3[-1]['fnn']
    # print(d_arr)
    # print(fnn)
    plt.figure(figsize=(8, 4))

    N = 20
    K = 2
    F = 30
    dt = 5
    t_stop = 10000
    noise = 0

    d_arr = [ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]
    fnn = [0.97643443, 0.89293033, 0.81096311, 0.74334016, 0.69211066,
           0.63063525, 0.59887295, 0.55379098, 0.53483607, 0.49436475, 0.47028689,
           0.43340164, 0.43032787, 0.41086066, 0.40368852, 0.38422131, 0.37653689,
           0.35911885, 0.33913934, 0.33504098, 0.30993852, 0.30532787, 0.29405738]
    plt.plot(d_arr, fnn, label=r'fnn, norm=$l_2$, $\mu=0$, $\tau=10$')
    #plt.plot(d_arr, E2_arr, label='E2, norm=l2')


    plt.title('N={}, K={}, F={}, dt={},'.format(N,K,F,dt) +  r'$t_{stop}$' + r'={}, $\mu$={}'.format(t_stop, noise))
    plt.xlabel(r'$d$')
    plt.legend()
    plt.tight_layout()
    plt.grid(True)
    plt.show()
# ############## BCD ########################
if False:
    eps_arr = L.BCD[-1]['eps_arr']
    d_arr = L.BCD[-1]['d_arr']
    #plt.figure(figsize=(5, 4))
    plt.plot(eps_arr, d_arr)
    plt.title('Estimating box-counting dimension')
    plt.xlabel(r'$\eps$')
    plt.ylabel(r'$d(\eps)$')
    plt.legend()
    plt.tight_layout()
    plt.grid(True)
    plt.show()


############################################################################################
############################################################################################
############################################################################################

# DIFFERENT N, K=1,2,3 F=15,30 LYAPUNOV
if False:
    fig = plt.figure()
    # delta_start=10 ** (-8), delta_stop=0.5, t_stop=100, dt=0.001, evolve_first=100
    # Logaritemski trend

    K=1
    F=15
    Ns= [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]
    lyaps= [0.5637770232677239, 1.8648056393341448, 1.9801317061513206, 2.664666044976428, 3.4209459585080984, 2.9815469691613723, 2.8162733483794664, 3.168922751746749, 3.250839114349168, 3.3233765200664065, 3.4039266406544457, 3.5501809625320524, 3.4126590548712095, 3.440406969394364, 3.4840236325847003, 3.6408703042794937, 3.5571402001214087, 3.445989842271801, 3.4628669515480945, 3.410794490517545, 3.616637133037387, 3.5953501894783164, 3.4471740062216814, 3.814974025039526, 3.5735925324873907, 3.58094873405841, 3.712259985752932]
    lyaps_std= [0.2602754249147655, 0.4006652009723492, 0.2634522030326836, 0.4385967915296202, 0.6004681654919676, 0.5374670067485562, 0.37646205157576934, 0.4668941421752684, 0.3852129015356735, 0.4418530505926703, 0.5690201129600935, 0.6775608558881797, 0.46369724791418604, 0.45039423894335695, 0.4218629467025363, 0.7810700576313393, 0.47230106984239706, 0.5019014227612033, 0.3355597674407942, 0.40784501958559055, 0.5224998805384848, 0.38045907177365706, 0.39879381936350417, 0.5989805025698104, 0.47099745915653485, 0.3401701212913476, 0.4797095510629111]
    sample_sizes= [2, 10, 10, 14, 18, 16, 15, 17, 18, 18, 18, 19, 18, 19, 19, 19, 19, 19, 19, 18, 19, 20, 19, 21, 19, 19, 20]
    stopping_time= [39.96196107260093, 9.962572674760516, 9.131660388551301, 6.841837500000001, 5.3441237458130075, 6.135476562500002, 6.401784333333334, 5.715503235294118, 5.534051621851956, 5.419615833333335, 5.3571969444444445, 5.159981842105264, 5.298606688135114, 5.239188157894736, 5.157646277845145, 5.085952368421054, 5.06462811136209, 5.2567977832972534, 5.166028684210526, 5.273925453544781, 5.00481552631579, 4.9838622500000005, 5.209499594347432, 4.7613021428571445, 5.034683421052631, 4.996464214952745, 4.8497190133168875]
    stopping_time_std= [18.448056072600913, 2.174562828270773, 1.3638684871762545, 1.1644677682921587, 0.9313457500803345, 1.0886830141334818, 0.8112797142971903, 0.8404343596420485, 0.6906866175631522, 0.6495210038460824, 0.9044148519267401, 0.9001218785967187, 0.7761729165925344, 0.6668905647539409, 0.5851828302897681, 1.0448321186256995, 0.6181551490148496, 0.7786091179161034, 0.4856463643151795, 0.643234327721227, 0.7237293919521967, 0.5070519486005196, 0.5815719057824341, 0.7431008375762178, 0.5668100388034174, 0.4869048137027723, 0.5809388494016666]
    plt.plot(Ns,lyaps,label='K={}, F={}'.format(K,F), c='b')
    plt.fill_between(Ns, np.asarray(lyaps)-np.asarray(lyaps_std), np.asarray(lyaps)+np.asarray(lyaps_std), color='b', alpha=0.2)

    K=2
    F=15
    Ns= [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]
    lyaps= [1.11377452129485, 1.1244740836205918, 0.6690180534533372, 0.665666311641434, 0.7607487796971342, 1.175999576499017, 1.2813263498828422, 1.2609026117437805, 1.3827379910500461, 1.4420958266573471, 1.356913181143996, 1.1612334223588554, 1.2249536597038337, 1.3113896204050441, 1.3926750487893824, 1.269056692639363, 1.36316370348203, 1.1187590204033069, 1.416856935524486, 1.3672455936653318]
    lyaps_std= [0.11880933173364351, 0.20432352593198738, 0.1972019603162, 0.1420172454013172, 0.12927683768126094, 0.31506951507947123, 0.2299223910536519, 0.2739375704742678, 0.30650856340014976, 0.22335695816706247, 0.19464258241904295, 0.16473850523693073, 0.08300358613748228, 0.11591074124552957, 0.19232871955391112, 0.16675164375941576, 0.21623063509077178, 0.048881285344945444, 0.2736655548729384, 0.18077286899966308]
    sample_sizes= [6, 6, 3, 3, 4, 6, 6, 6, 7, 7, 7, 6, 6, 7, 7, 7, 7, 6, 7, 7]
    stopping_time= [16.101920310944443, 16.230205833333333, 29.447848333333337, 28.137991666666675, 23.885946250000003, 16.49463107796457, 14.356718172260805, 14.815311445642601, 13.44530099546997, 12.621920846423171, 13.313401582276587, 15.559580833333337, 14.538262500000002, 13.624152142857145, 12.96578559727801, 14.216772763853138, 13.33007667470966, 15.876217855695572, 12.918430714285716, 13.179225801320566]
    stopping_time_std= [1.7390989037540843, 2.6117820612493814, 10.141920387407728, 7.062209700523973, 3.4375622500276415, 5.45853761438059, 2.9601982386868673, 3.510314575259224, 2.889061855704382, 2.1448829410371566, 1.7496759845984649, 2.072211730058488, 0.9739512995787045, 1.2047480129403616, 1.733191263532724, 1.8944804620528277, 2.065913132041617, 0.6997810778566359, 2.1524319294621503, 1.6266467821872457]
    plt.plot(Ns,lyaps,label='K={}, F={}'.format(K,F), c='g')
    plt.fill_between(Ns, np.asarray(lyaps)-np.asarray(lyaps_std), np.asarray(lyaps)+np.asarray(lyaps_std), color='g', alpha=0.2)

    K=3
    F=15
    Ns = [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]
    lyaps = [0.7279391571152516, 0.8688106646240302,
             1.4775179887721366, 1.3407452091497716, 1.2991692845317586, 1.3113605406270694, 1.3099238707682537,
             1.1565937764408247, 1.2879037163155396, 1.5171185681525958, 1.4605366788664318, 1.420695236097249,
             1.5009553380719916, 1.5260773733897068, 1.6822299799879146, 1.4643667557968247]
    lyaps_std = [0.1883078862124242, 0.14809322042820214,
                 0.5426309380436719, 0.2161937526603951, 0.176811774343612, 0.12948549138315074, 0.3408024023019397,
                 0.1913714030719835, 0.22390131900400276, 0.23731644100014862, 0.31288125572454106, 0.21467179798215952,
                 0.27214329327310616, 0.29679682274704033, 0.2786744441889772, 0.29085190494591306]
    sample_sizes = [7, 9, 14, 14, 14, 14, 13, 12, 14, 16, 15, 15, 16, 16, 18, 15]
    stopping_time = [25.965221428571425, 21.16875410105223,
                     13.428491870278313, 13.583853571428573, 13.914253571428572, 13.669467857142857, 14.652219230769232,
                     15.784800096897856, 14.169860714285717, 12.001693597583293, 12.690594013477558, 12.76390145257239,
                     12.229696875000002, 12.067042778827751, 10.814808333333334, 12.568616666666667]
    stopping_time_std = [6.363005681768139, 4.580824911449499,
                         4.122829538558613, 2.3084501328707825, 2.004604855854328, 1.5645473069532274,
                         4.576148030939676, 2.7936240572924227, 2.358685713816235, 2.056531401867506,
                         2.6556957034207778, 1.9018647262501966, 2.3548176824764595, 2.3758099228374854,
                         1.701950474986851, 2.3872038907099604]

    plt.plot(Ns,lyaps,label='K={}, F={}'.format(K,F), c='r')
    plt.fill_between(Ns, np.asarray(lyaps)-np.asarray(lyaps_std), np.asarray(lyaps)+np.asarray(lyaps_std), color='r', alpha=0.2)

    K=1
    F=30
    Ns= [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]
    lyaps= [2.1834651483737346, 3.9267021259566413, 3.3717278730678566, 4.989312638757758, 6.26482751397069, 5.840830269602277, 5.874290510044593, 6.476434998227793, 5.726958961839838, 6.151864437956814, 6.102023740512446, 6.112498076488456, 6.468809673414919, 6.330821851213931, 6.250096870315063, 6.661366561970902, 6.570436562558012, 6.710377998816153, 6.370801536353778, 6.542780485517972, 6.754677996290249, 6.912365230206446, 6.664457659642542, 6.807068394692876, 6.671023309430572, 6.49622664691903, 6.41264978070168]
    lyaps_std= [0.6131131910669053, 0.8323883151472106, 0.6581088457010109, 0.8666190310314961, 1.2280821422106738, 0.9855862993350999, 1.0373983918821414, 1.7474109599765202, 0.9639275135888531, 0.8578345030594725, 1.1300773048562986, 1.0194881032341736, 1.085753842812804, 0.9638389884705113, 0.8942466632296303, 0.8163896058076134, 0.9791932046058743, 0.7900124523293269, 0.8486937473845102, 0.7899978430944252, 0.7155316548169505, 1.01941265975143, 0.9401855212482495, 0.7362920620313178, 0.7793509067139561, 0.6624965324807147, 0.505116755912433]
    sample_sizes= [11, 21, 18, 27, 34, 31, 32, 34, 31, 34, 33, 33, 35, 34, 34, 37, 36, 37, 35, 36, 37, 38, 36, 37, 36, 36, 35]
    stopping_time= [8.648789067898562, 4.715849649535343, 5.465483841246478, 3.654871063944344, 2.939036323529413, 3.127073871385275, 3.108610898189502, 2.902025735294117, 3.1821642374125063, 2.9384158150159614, 2.999775909090909, 2.981427570941543, 2.8148544285714294, 2.8631020776370746, 2.8953231615015036, 2.7000824311194784, 2.7555479166666665, 2.676553702765618, 2.832401676960901, 2.7477701388888893, 2.653513918918919, 2.6169289149636743, 2.7103339014525014, 2.6352657369193864, 2.6931120833333337, 2.757931726274791, 2.781378859579965]
    stopping_time_std= [1.9596018058520734, 0.9755923698166469, 1.0888276216005186, 0.5985210735022733, 0.571452155603178, 0.5522492287081937, 0.5238006856973721, 0.6593744904638376, 0.5304885700541409, 0.41159054737860035, 0.5238934002280693, 0.4956387900588045, 0.4546032144923024, 0.41598539314826677, 0.4195357896222452, 0.32272106842495407, 0.3920321582194547, 0.2990643301056569, 0.37779945716309565, 0.32233011517316285, 0.2758255649349664, 0.3613687041414975, 0.36136833116965916, 0.2890517954980771, 0.3102098498692589, 0.2860054594089219, 0.2156962280562755]
    plt.plot(Ns,lyaps,label='K={}, F={}'.format(K,F), c='m')
    plt.fill_between(Ns, np.asarray(lyaps)-np.asarray(lyaps_std), np.asarray(lyaps)+np.asarray(lyaps_std), color='m', alpha=0.2)

    K=2
    F=30
    Ns = [6, 7, 8]
    lyaps = [0.4701839332555377, 0.6773238968975369, 0.29402402986678955]
    lyaps_std = [0.04916336323557263, 0.13848949912103184, 0.0]
    sample_sizes = [2, 3, 1]
    stopping_time_std = [3.9867675000000062, 5.01692123266467, 0.0]
    plt.plot(Ns,lyaps, c='c')
    plt.fill_between(Ns, np.asarray(lyaps)-np.asarray(lyaps_std), np.asarray(lyaps)+np.asarray(lyaps_std), color='c', alpha=0.2)
    Ns = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]
    lyaps = [1.796271273933782,
             2.6624815795924843, 2.2559274432168883, 2.0052322511670533, 2.1319671358161556, 2.031143149651218,
             2.476788058884317, 2.4612698295904027, 2.608559293764831, 2.218585212183714, 2.612170561863577,
             2.380091369921968, 2.6059327208003986, 2.518601801203695, 2.382257751270923, 2.4503795237163515,
             2.734218440139586, 2.655236919482324, 2.7240145983102195, 2.64287653086445, 2.7504700611096466]
    lyaps_std = [0.4792950100708893, 0.5337388716210845,
                 0.8692715558177126, 0.3129756467114919, 0.6043942867847629, 0.3820307045128111, 0.4570679569949322,
                 0.5186938113778815, 0.36428394059502417, 0.40537158611625046, 0.7172463717318966, 0.45769704519974824,
                 0.35593155612904837, 0.3980901096554955, 0.34587615198945953, 0.16530361341765915, 0.3611995714646436,
                 0.3482748788516159, 0.3628318060287131, 0.2093339251013179, 0.3794324108573821]
    sample_sizes = [9, 14, 11, 11, 11, 11, 13, 13, 14, 12, 13, 12, 14, 13, 12, 13, 15, 14, 15, 14, 15]
    stopping_time = [10.536283495140056, 6.927935357142856,
                     8.534673365346904, 9.080994753914226, 8.910611363636365, 9.061920454545456, 7.422050384615384,
                     7.557803813603906, 6.930929374074728, 8.233165179889738, 7.210165000000003, 7.687384211100845,
                     6.924336785714287, 7.201168076923079, 7.611970102073393, 7.269785362757777, 6.607500617809612,
                     6.794846396667077, 6.63734061024269, 6.752675928211701, 6.580581666666668]
    stopping_time_std = [2.6550863559722444, 1.362754727239509,
                         1.8594331627587004, 1.5594780967248256, 2.25160516622757, 1.837488015069133,
                         1.4860436220713766, 1.7222914947847885, 0.9824282405110677, 1.3689703473451504,
                         1.604240334551496, 1.2816412406779494, 0.8980263366383765, 1.0486113708668712,
                         1.1843513009851057, 0.5220211624045876, 0.9502811290726402, 0.9127483868795933,
                         0.9935841740500853, 0.5713506764450805, 0.9910148921636052]
    plt.plot(Ns,lyaps,label='K={}, F={}'.format(K,F), c='c')
    plt.fill_between(Ns, np.asarray(lyaps)-np.asarray(lyaps_std), np.asarray(lyaps)+np.asarray(lyaps_std), color='c', alpha=0.2)

    K=3
    F=30
    Ns = [9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]
    lyaps = [0.5526699880983177, 1.0954305460572886, 1.3795878355828342, 0.6095259625097568,
             1.3014592068744475, 2.6932555509209437, 2.837198401977138, 2.4904110375282467, 2.7075172856758623,
             2.3388355746137734, 2.552887264403499, 2.801480356516372, 2.902024198666382, 3.126896204975069,
             3.332548236577613, 3.4205938574545884, 2.9613129275026235, 3.0847824997818067, 3.069780481783399,
             2.943982846272816, 3.055175550552756]
    lyaps_std = [0.0936430240043647, 0.3395824866844909, 0.26651888419137126, 0.1009458915583698,
                 0.2704161387599959, 0.7626943281719688, 0.5369567745801537, 0.5106864589304908,
                 0.5828431575438148, 0.3435878556004126, 0.3913893123354689, 0.38628252624821247, 0.6185741517869343,
                 0.48066223192110186, 0.6722086409063023, 0.7418922093270187, 0.5706795844034972, 0.6139700854639685,
                 0.6102564954601112, 0.4385588927990703, 0.5479714557730156]
    sample_sizes = [5, 11, 15, 6, 14, 28, 30, 26, 29, 25, 28, 31, 31, 34, 35, 37, 32, 33, 33, 32, 33]
    stopping_time = [33.02951, 17.36301908666365, 13.289521495081209, 29.89080833333334,
                     14.211937625993501, 7.123233928571428, 6.475335, 7.397724413414787, 6.837347982441041,
                     7.733710989529875, 7.109143043256293, 6.4503850400188, 6.37155213515593, 5.805784810501528,
                     5.51330898256922, 5.394993243243243, 6.205943649619803, 5.94605, 6.00232457965411,
                     6.1544859375000005, 6.009612379712514]
    stopping_time_std = [5.654739431064186, 4.054239177582172, 2.340719068671169, 4.91834611097064,
                         2.9042931694745433, 2.0496439319528235, 1.230900833905732, 1.4060961287840301,
                         1.3860653093027795, 1.0627515810309849, 1.0991129072322063, 0.8921712907962893,
                         1.2688044224900545, 0.8901648806678524, 0.9951017511988882, 1.0354542458208555,
                         1.196641954677927, 1.0312012381851692, 1.175205297967248, 0.9016227637749199, 1.1820092864396416]
    plt.plot(Ns[:4],lyaps[:4], c='grey')
    plt.fill_between(Ns[:4], np.asarray(lyaps[:4])-np.asarray(lyaps_std[:4]), np.asarray(lyaps[:4])+np.asarray(lyaps_std[:4]), color='grey', alpha=0.2)
    plt.plot(Ns[4:],lyaps[4:],label='K={}, F={}'.format(K,F), c='grey')
    plt.fill_between(Ns[4:], np.asarray(lyaps[4:])-np.asarray(lyaps_std[4:]), np.asarray(lyaps[4:])+np.asarray(lyaps_std[4:]), color='grey', alpha=0.2)

    plt.xlabel('N')
    plt.ylabel(r'$\lambda_{max}$')
    plt.title(r'$\delta_{start}=10^{-8}$, $\delta_{stop}=0.5$, $dt=10^{-4}$')
    plt.legend()
    plt.grid(True)
    plt.show()

# DIFFERENT N, K=1,2,3 F=15,30 STD, AVR
if False:
    fig = plt.figure()
    # delta_start=10 ** (-8), delta_stop=0.5, t_stop=100, dt=0.001, evolve_first=100
    # Logaritemski trend

    K=1
    F=15
    Ns =  [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]
    av =  [3.1468553549359406, 3.3501468152431464, 2.853177226348884, 3.1200142028555073, 3.1124074636344425, 3.087115994047981, 3.076409120009331, 3.0055087300846717, 3.0869954741889423, 3.1764009521339207, 3.090231713745835, 3.1173994857344915, 3.036565638861396, 3.062078848433815, 2.9893902452593846, 3.062631752530527, 3.0323693464083528, 3.0279782088232183, 2.999602087561541, 3.034238846017955, 3.101788243852439, 2.9763683279659063, 2.99832198336956, 3.06423188448264, 3.0030172531062944]
    ma =  [18.1912844118134, 20.934964514686996, 20.061369100138467, 20.39439983630838, 24.07439823654872, 20.66800372872248, 23.833608473780853, 22.425702315633107, 22.868679304885763, 25.39701069373357, 24.55766935606043, 24.01379748845926, 24.377147797787295, 25.13277059179432, 23.179038569521428, 23.460120049922864, 25.283163502348966, 23.745773834422383, 24.214380808295484, 25.724164883038434, 23.651980173090365, 25.90024937887931, 23.635198530620805, 24.32470620076041, 22.227076922959085]
    mi =  [-13.992752027690498, -13.196506338868282, -12.736211851601643, -15.090798161842635, -13.286787132834407, -15.201743467622327, -15.995397064455936, -17.513780968310066, -15.978413776629777, -18.08260732264815, -15.535539161231362, -15.305682757663627, -14.752076550760412, -19.296308576931715, -17.16693720754573, -14.87827290883599, -17.5124929620229, -15.810377375834483, -17.30611517592053, -16.308177707073007, -17.322046575847317, -16.723864025566286, -16.273711466478485, -15.719949337434162, -18.110944782224642]
    sd =  [6.111052218332628, 6.275159237120651, 5.879650322751081, 6.09261189371592, 6.085822714258735, 6.071771384433456, 6.062348311083774, 6.008794685597108, 6.06608627720034, 6.12499183429449, 6.069848988020092, 6.083253820752408, 6.026227426720449, 6.049321787049497, 5.991832788446477, 6.0524057834635006, 6.0294192466877305, 6.021012482037529, 5.9991371383908305, 6.028864725849844, 6.0785092061820025, 5.986970786317123, 6.001387866992492, 6.053566863529407, 6.002640536709229]
    true_sd =  [13.66301238066599, 15.357001099906153, 15.483524433719113, 17.223523437421935, 18.23877298197258, 19.190377593572492, 20.09676611363204, 20.794827451951086, 21.85637994026157, 22.86072720017777, 23.493325958074852, 24.301472349729934, 24.828154269725445, 25.644922753330643, 26.06186230137946, 27.047913838316976, 27.593562521965286, 28.194542529173578, 28.744353012830935, 29.492118764231435, 30.355962396211968, 30.47519075097885, 31.145371481445093, 31.986337309497113, 32.297422827294625]
    #plt.plot(Ns, av, label='K={}, F={}'.format(K, F), c='b')
    plt.plot(Ns, true_sd, label='K={}, F={}'.format(K, F), c='b')

    K=2
    F=15
    Ns =  [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]
    av =  [12.556520902693146, 11.391231218621654, 2.6820230576920396, 2.1204943413425075, 1.518772075806031, 2.1688486967814087, 2.66788584522272, 3.1280664088476624, 3.698018167503234, 3.086186563161117, 2.6092260416829722, 2.3838418740475817, 2.3995137073562773, 2.4265763205695223, 2.407099524774489, 2.3673208918133297, 2.4115830257261504, 2.4412845842108766, 2.433741535057186, 2.5153470851532282, 2.3685952846633156, 2.4114281740930443, 2.491900412735366, 2.476238694670352, 2.5373825923369484]
    ma =  [20.500586480329225, 24.732617484801956, 11.737134640222118, 10.702506206753792, 8.421464183126009, 12.86057443189046, 19.43657539465653, 23.70828755397475, 22.300283810648928, 19.296157234946147, 18.99511802769787, 19.65759253192356, 21.411700062578003, 21.177550507358344, 20.725263778869152, 20.57148763098247, 21.220716006399226, 23.525082647568667, 22.53848057486153, 22.85599232555029, 22.974264302929956, 23.70058917708056, 23.144830411113734, 21.096633045843028, 22.485386074128165]
    mi =  [4.886732734667034, -0.6183954408259316, -8.874077558611312, -8.648664512960643, -6.262280259664165, -10.104465327596829, -18.393851532315686, -18.8834235227346, -14.067285769316197, -13.64260741179151, -14.528314267471465, -14.792489431425855, -15.617112085575268, -14.884658082007164, -16.720046427221764, -16.767948153632418, -16.053701323392325, -15.991179480514798, -17.674887224001026, -16.965859939578664, -17.0958772963499, -18.430614654897745, -19.227530190584584, -17.342439597036226, -19.438380743678074]
    sd =  [5.5390966474525465, 6.408903198691936, 5.746176230003875, 5.222690895367655, 4.524921292286791, 5.2770331497541605, 5.73258603990108, 6.101030452290133, 6.465245680520893, 6.062768553144792, 5.683704431645847, 5.482364510283317, 5.497993358255226, 5.533930884088354, 5.5148349982256955, 5.473695334835325, 5.506862107690783, 5.537336759902375, 5.527824380143225, 5.601664829294109, 5.468605368969926, 5.511115182158508, 5.591921551118197, 5.57511702840768, 5.624322752798116]
    true_sd =  [12.385744718702778, 15.697748055667251, 15.202542407978779, 14.771688079155261, 13.574602171112398, 16.687246775851825, 18.961502742530165, 21.02460677897219, 23.148597246528507, 22.03672882389385, 21.883018575155756, 21.898411117891392, 22.618910432317172, 23.45971239213914, 24.015492689090177, 24.37853674776191, 25.20052368624336, 25.948197028861838, 26.487823760593848, 27.402243805830956, 27.300980965589357, 28.074263434252742, 29.001094257296185, 29.44324011820111, 30.211051446559306]
    #plt.plot(Ns, av, label='K={}, F={}'.format(K, F), c='g')
    plt.plot(Ns, true_sd, label='K={}, F={}'.format(K, F), c='g')

    K=3
    F=15
    Ns =  [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]
    av =  [15.0, 4.5000000000000355, 14.999999953094884, 3.034440444378758, 13.269246138464833, 4.208693896909291, 3.3174223728476306, 2.5900808564438114, 1.6834137045834392, 2.4287102702657726, 2.3769168086001553, 2.8559349093030626, 3.09143299137936, 3.535332422887841, 4.1871970770371325, 3.299654041766556, 3.2019607596539275, 2.845777110282782, 2.6121151655806907, 2.520401591799764, 2.5726278627949037, 2.574726340879803, 2.7605128738620928, 2.766660110828653, 2.949019552584042]
    ma =  [15.000000000012326, 11.373863542444298, 15.003963972196388, 10.773703858501674, 23.720371369533034, 16.20473922657131, 14.535757840543598, 12.854902647879916, 9.103450726395542, 13.34199310678242, 16.179117420248986, 19.46652071851253, 21.68069009201841, 23.159623983196457, 24.58522675946358, 21.257600903474874, 21.667292649423228, 19.404661838627252, 17.84285285586612, 20.002124763777918, 20.77224780272713, 21.69961537683485, 22.396949128264776, 22.59696954017496, 23.480813521472275]
    mi =  [14.99999999998989, -2.373863542441407, 14.995985517348828, -6.642440908678022, 4.164745050488515, -9.41132930667441, -8.810226002289642, -9.009267462217839, -6.241481911629847, -8.385555416258033, -13.131227491447357, -18.34866787302496, -18.851912960659565, -15.796399441665065, -15.787847861619603, -13.678470257782164, -15.605984242526626, -14.21549784203188, -14.049194092834552, -15.75835010785904, -17.209099935835088, -15.391547992968658, -19.176881083186384, -17.989779642452156, -16.73246023158515]
    sd =  [3.922013466592727e-13, 6.873863542433794, 0.000810345307143178, 6.025674650671816, 4.792461670204951, 6.739325228545575, 6.2247677977387035, 5.669295377708298, 4.734693640294832, 5.525403740273743, 5.470863432420222, 5.892178793599348, 6.078870208857569, 6.36641149486304, 6.726376054970464, 6.21115942043001, 6.144655162449048, 5.883721167694158, 5.686292936537819, 5.6120755935813245, 5.651183987650777, 5.6592544825681275, 5.819307520967268, 5.814119177716001, 5.955215192355961]
    true_sd =  [8.765663707770297e-13, 2.477366938395446e-12, 0.0021439406236603517, 17.042675531637368, 14.376545219708438, 21.311345269483905, 20.644769313517536, 19.63849834999011, 17.071071163297553, 20.673180730298213, 21.173636120377797, 23.54310423117978, 25.025194335590086, 26.963359129316267, 28.696499835788796, 27.672171147536385, 28.126428993985368, 27.537882690206732, 27.204188224615194, 27.476481779529898, 28.20509650026539, 28.825838054330173, 30.199548122900804, 30.707294201457515, 32.01913967590457]
    #plt.plot(Ns, av, label='K={}, F={}'.format(K, F), c='r')
    plt.plot(Ns, true_sd, label='K={}, F={}'.format(K, F), c='r')

    K=1
    F=30
    Ns =  [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]
    av =  [4.241548777852636, 4.220483020811884, 3.472992040726443, 3.859675192733049, 3.7606882184630974, 3.7574525492255098, 3.7857777129802788, 3.7877801276421583, 3.756171848869657, 3.775050406616812, 3.597033582640001, 3.8379498113688078, 3.8113885001532206, 3.896671269475779, 3.747525769852788, 3.706503638426291, 3.7974379902475297, 3.8894803533287603, 3.8674226500082844, 3.8865642156447007, 3.7518320146749593, 3.820581325801205, 3.7697429566965384, 3.8665492373334516, 3.753225246050354]
    ma =  [31.268458290785812, 39.701671321762305, 32.4106674886823, 36.33085968906337, 37.10244202883056, 38.58267777590557, 38.69013786941303, 36.771610519043215, 38.898145497470104, 37.99083008827737, 47.00430229769974, 43.263688350748055, 41.68126427088593, 44.18897394439827, 38.53720988510184, 38.587290026105705, 39.085534520496275, 39.18455020334626, 40.05937058807603, 44.43586160059867, 36.690511225875596, 40.6874116803686, 41.61803487674171, 40.694701432830136, 42.18518210472865]
    mi =  [-24.2140947883775, -25.506600706513282, -25.722239730637643, -27.345942824801956, -26.432401522209524, -25.66827733577551, -26.933129799914585, -33.95870395588201, -27.060199358464377, -28.947671956895, -36.46575435378184, -28.66082435936261, -30.442694024433244, -28.650755073649286, -30.139790260617115, -30.58484975738653, -29.341314619938423, -30.870272847168152, -32.03545942029094, -31.461023921578835, -30.738508020598218, -34.2621098688934, -27.649101964958685, -32.9326772416128, -34.62107864207405]
    sd =  [10.452741996334415, 10.462642117504636, 9.611316777828675, 10.030034077662537, 9.937429596964936, 9.95356437422567, 9.98983401432496, 9.976603317479004, 9.940886012321565, 9.960227966007123, 9.748849391217883, 10.01954461694456, 9.983503334465224, 10.084489552779893, 9.922476587654584, 9.9033216401988, 9.972471052253596, 10.075961838342382, 10.04113459753862, 10.053285708043818, 9.92523652899802, 10.017609215719927, 9.957849004384451, 10.042470181746134, 9.933954420964485]
    true_sd =  [23.37002575531841, 25.60748909324384, 25.407802572442275, 28.345067620330585, 29.79966984559394, 31.460157438443417, 33.100448817097735, 34.53728332376167, 35.80063459149369, 37.24470264393076, 37.719749207998, 40.042422604016096, 41.13053922733104, 42.75201077264061, 43.21698612897647, 44.2622816087611, 45.66610281407051, 47.220513297233, 48.1201328787597, 49.19221848322607, 49.59594653133752, 51.05798830273832, 51.700500184815084, 53.100224344851135, 53.45847785250026]
    #plt.plot(Ns, av, label='K={}, F={}'.format(K, F), c='m')
    plt.plot(Ns, true_sd, label='K={}, F={}'.format(K, F), c='m')


    K=2
    F=30
    Ns =  [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]
    av =  [13.01231206738454, 12.434687634164375, 4.350808466932562, 3.6135807595711262, 2.160834384385678, 3.119379101382156, 3.551687092927055, 3.6094635876925323, 3.9138314958635476, 3.6985605695377886, 3.12829702508856, 3.065331995552916, 3.2022232800682837, 3.254150021494637, 3.301211362344681, 3.1859335420686663, 3.0956097297645226, 3.0291670267540254, 3.0499944664688776, 3.0216205011091684, 3.207317058226336, 3.2532757998707753, 3.156735482436469, 3.1788612605517765, 3.2297838830022125]
    ma =  [34.40063268521715, 49.87838837450043, 29.71808931842754, 26.241415563768395, 18.565477654544218, 28.3362690174313, 33.32634309966015, 35.55537730374501, 38.53802343479786, 34.321845162817596, 35.08270177723796, 32.543374784175064, 34.85361464172298, 38.089481318525735, 37.70597561234861, 35.64244519043468, 35.21989446420768, 42.893528422192844, 40.36963173715772, 39.30168204091671, 41.34163154454858, 40.530129682316336, 37.96119383212365, 40.237856430734226, 42.95855324954913]
    mi =  [-6.884589873239601, -23.43425001603433, -24.91241434163897, -21.152580061972827, -12.691655131663834, -26.67153162143892, -29.307804717496165, -27.406467578728417, -25.903386927608175, -27.962645328619626, -27.02362968448999, -29.429469384085298, -27.279162300376054, -33.177102736211, -30.14815693338508, -27.981312981377343, -28.41456073050159, -32.318380264092745, -26.429731641627814, -32.30251394400669, -32.993326186918154, -37.03278444261824, -28.48327867429404, -34.414606083942765, -32.907328154254955]
    sd =  [14.867711522277476, 14.791453746676241, 10.566689990696993, 9.757143136010699, 7.7550883243488355, 9.162178921200768, 9.671227990959414, 9.77228817695933, 10.103299941704707, 9.862844783434978, 9.16892120809929, 9.087383615769717, 9.261758289832468, 9.318444637610039, 9.41020189774708, 9.242456018910596, 9.13104940896975, 9.036795056435588, 9.050830142786447, 9.019031395930691, 9.277422643711356, 9.327374011498252, 9.209789522482868, 9.233519990181128, 9.29307940840781]
    true_sd =  [33.244926496157724, 36.19677520548761, 27.90712805797944, 27.58483262250423, 23.26514856593129, 28.936820834195515, 32.01938282334913, 33.79771407607121, 36.362063965356214, 36.81624126441786, 35.47570163084972, 36.327511866841036, 38.13175027566401, 39.48838697354045, 40.97035943899063, 41.258852687936255, 41.82122208447492, 42.31402820617315, 43.34250775129941, 44.10641555402158, 46.333492556821334, 47.47479805017315, 47.75965721031879, 48.799512980302104, 49.97579716205325]
    #plt.plot(Ns, av, label='K={}, F={}'.format(K, F), c='c')
    plt.plot(Ns, true_sd, label='K={}, F={}'.format(K, F), c='c')

    K=3
    F=30
    Ns =  [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]
    av =  [30.0, 4.5, 16.0112891466113, 4.054242384623436, 18.698978152710296, 6.365122984427758, 4.705913828231047, 3.114759759579203, 3.5905860607794144, 3.9339533375003106, 3.580772243962696, 3.966206367033975, 4.0386897082925275, 4.239649838117424, 4.391118723664738, 3.952194053321862, 4.068107243745265, 3.8681577377406864, 3.7559176878293137, 3.5721410154471767, 3.7044738103466366, 3.64595259324568, 3.6566160671391623, 3.7474032693838755, 3.790625630670118]
    ma =  [30.00000000005617, 15.212142642817113, 37.27701459339045, 34.837769034294624, 58.36981397841712, 40.890503310701384, 40.038100032423095, 26.574795637458003, 27.99143414451609, 30.64043903105241, 35.22226577542184, 35.45433045806789, 38.376439884844345, 43.51583819657992, 39.69951819169147, 35.49434589723246, 35.9538940876349, 38.87599613411652, 33.99087210488847, 38.659000332940614, 39.449484486980026, 44.04459054269299, 41.32050076332881, 38.27648659833789, 37.97951255569892]
    mi =  [29.99999999994462, -6.21214264281625, -5.035983248149893, -22.5087146450577, -15.799392952512896, -26.396560579143117, -25.31536158532878, -20.508037407332427, -14.418241199333812, -25.647572754858455, -29.999348604406954, -33.85620314111956, -32.99865512601915, -32.23286021919239, -30.556608207700453, -32.02831605485461, -27.58919373046546, -30.944821400428108, -33.584815987578715, -34.52066800299056, -34.025948768018274, -34.558421857795516, -40.747438557071646, -34.74587806696273, -36.62869376905944]
    sd =  [1.6122227952051847e-12, 10.71214264281428, 14.965870980524823, 10.257732781959138, 14.521347317846764, 12.258522597620683, 10.906492822430607, 9.175617315983436, 9.73944038179477, 10.122327620506189, 9.714649759610797, 10.152729594524622, 10.234959750741655, 10.446397526276023, 10.587820900408728, 10.117044639797761, 10.267342139511852, 10.060714783480185, 9.930774633404477, 9.721435222469633, 9.877515307550494, 9.807771502656372, 9.821444213221596, 9.925870350632259, 9.966677938161322]
    true_sd =  [3.6042296730524704e-12, 4.49826670052676e-13, 39.59595565047575, 28.995493762878937, 43.501930260415506, 38.736979355249524, 36.130370530436274, 31.77149194544493, 35.11578798835858, 37.85967018587387, 37.601109564033194, 40.568054088327415, 42.138140632803875, 44.23016803364549, 46.037643065150135, 45.18631780301192, 46.82323790611854, 47.1227809847356, 47.584778508615564, 47.57211972506423, 49.30902775061197, 49.963313098941086, 50.93601262291027, 52.44591622041022, 53.62406059649854]
    #plt.plot(Ns, av, label='K={}, F={}'.format(K, F), c='grey')
    plt.plot(Ns, true_sd, label='K={}, F={}'.format(K, F), c='grey')


    plt.xlabel('N')
    #plt.ylabel(r'$<X_n>$')
    plt.ylabel(r'$\sigma$')
    plt.title(r'')
    #plt.legend()
    plt.grid(True)
    plt.show()

# DIFFERENT F, N=20, K=1,2,3,4,5 LYAPUNOV
if False:
    fig = plt.figure()
    # delta_start=10 ** (-8), delta_stop=0.5, t_stop=100, dt=100, evolve_first=100
    # NlogN trend

    N = 20
    K = 1
    Fs = [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]
    lyaps = [0.19846193604197668, 0.589307898505786, 0.883662917985435, 1.4173992384131624, 1.4810034294125687,
             2.002519668966837, 2.0796360778332357, 2.592153779943812, 2.9360836099445073, 2.8796853171028634,
             3.198004011709217, 3.6190546729004214, 3.8664215526551544, 3.843756580839649, 4.070094537542669,
             4.369435803041305, 4.477372529473263, 4.691459119448272, 5.039421774924689, 5.289565812126864,
             5.513701867657479, 5.380125751595288, 5.932456136417617, 5.928534817202934, 5.99605232101815,
             6.435173081123184, 6.030124920060381]
    lyaps_std = [0.0, 0.11156651342826888, 0.27187473995682804, 0.22225165950464723, 0.33330993954232885,
                 0.1768873680008955, 0.3017669277761506, 0.36074144133250446, 0.31954288130472824, 0.44887324842697884,
                 0.39258943719197753, 0.6534184052516167, 0.57020346711601, 0.4367420942760495, 0.5001440278108814,
                 0.6125053424419925, 0.66845910467257, 0.615846656696183, 0.5868301858753405, 0.6261775452972018,
                 0.7296020445964261, 0.454057868712999, 1.1392244341794324, 0.9058829710515557, 0.7160240363815471,
                 0.7869337796054209, 0.7172621191625663]
    sample_sizes = [1, 3, 4, 7, 7, 10, 11, 14, 16, 15, 17, 19, 21, 21, 22, 24, 24, 25, 27, 29, 30, 30, 32, 32, 33, 35,
                    33]
    stopping_time = [89.32460257589585, 31.15529577483139, 22.077497629482103, 12.797150714285715, 12.579067857142856,
                     8.9258835, 8.69977863636364, 6.970259843828477, 6.112272667213635, 6.311003976218353,
                     5.620393823529412, 5.040161196167777, 4.688943095238096, 4.672143571428571, 4.42052223746661,
                     4.136764791666665, 4.033112476085905, 3.8413152594677036, 3.564917528816748, 3.3982174137931036,
                     3.2742558333333327, 3.317846833333334, 3.084077968750001, 3.0650917187500006, 2.997033545996621,
                     2.798464142857143, 2.9798541408237997]
    stopping_time_std = [0.0, 5.716353463523089, 6.683007110116297, 1.875189327340885, 2.715656515560027,
                         0.8329762930965824, 1.2246412830826405, 0.9512313343232088, 0.6892973733250697,
                         1.0040278877576163, 0.6336841480745068, 0.8089872050644044, 0.7182670047774354,
                         0.5338251275653392, 0.5345283296433173, 0.5779904503442662, 0.5038510044662241,
                         0.48640520943494764, 0.4115747859873057, 0.4000115078261273, 0.4526492657674246,
                         0.2719928375367858, 0.5115990313220933, 0.5021368772554243, 0.3428133861673283,
                         0.3602146554438432, 0.34018679199434565]
    plt.plot(Fs,lyaps,label='d={}, K={}'.format(N,K), c='b')
    plt.fill_between(Fs, np.asarray(lyaps)-np.asarray(lyaps_std), np.asarray(lyaps)+np.asarray(lyaps_std), color='b', alpha=0.2)


    N = 20
    K = 2
    Fs = [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
          35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60]
    lyaps = [0.3887999491749873, 0.4016828473420135, 0.6071694079270237, 0.6885633103605625, 0.9346746291112882,
             0.928560795714682, 0.995704488160456, 1.2374583990710701, 1.2913834799482424, 1.4385574610118195,
             1.5280718879624018, 1.5911125389773502, 1.6762084433892956, 1.8078486627699115, 2.012094155111129,
             1.94455013436223, 1.8881817414177857, 2.0546572902672957, 2.0878911714859907, 2.1533957361351104,
             2.3230422426250272, 2.0167717059989276, 2.289278449277683, 2.372240421084109, 2.2760892145616363,
             2.6360100253828036, 2.7850043407957066, 2.620078767360247, 2.572051397605023, 2.736368091753839,
             2.7946957009174707, 2.870035692485131, 2.767648006265645, 3.2996483174506657, 2.962115270045577,
             3.4907656010869417, 3.190797624865786, 3.353253569799923, 3.5044721957967444, 3.344403916062733,
             3.6387833412978456, 3.301811933748635, 3.4562099948962186, 3.534579318751875, 3.7319377361888413,
             3.8639393472307595, 3.7265501654700754, 3.787090235567203, 3.737100747736234, 3.9864985849783188,
             4.176741103494268, 4.189789414112704, 4.104103710209377, 3.883345754599542]
    lyaps_std = [0.0945370675065478, 0.11683170794608339, 0.04325151543874054, 0.07909410970816949, 0.2947185684911203,
                 0.180757918919625, 0.18576912928711836, 0.16715140189767566, 0.19477735212869282, 0.2542982328824982,
                 0.31869755971690006, 0.38780237846357685, 0.27423122989568993, 0.42600505111360776, 0.3041057466515395,
                 0.33023865529580415, 0.33484930003728325, 0.40612975575766447, 0.24371973892948864,
                 0.41795367251366056, 0.4737063514862609, 0.2639169965158212, 0.3909437029518575, 0.3472402928262809,
                 0.32363654773049155, 0.4226589449523016, 0.4151088618219595, 0.46898874683111147, 0.4266785332235355,
                 0.4125755711914585, 0.5272394266148757, 0.3707138027027276, 0.32381154047690847, 0.7243065120498944,
                 0.5209856999780699, 0.7068057735926185, 0.7052753928964685, 0.6153912320292281, 0.5949621053290273,
                 0.5703594397529237, 0.6646746236986485, 0.5685933157929763, 0.6788732204513913, 0.5655537583075931,
                 0.7582858371702396, 0.5244534138360385, 0.6825238040858147, 0.6823606443812453, 0.5552954517323365,
                 1.0284906833559784, 0.7906210851146079, 0.7040005819954427, 0.9015946341904262, 0.6120058019931949]
    sample_sizes = [2, 2, 3, 3, 4, 5, 5, 6, 6, 7, 8, 8, 9, 9, 11, 10, 10, 11, 11, 11, 12, 11, 12, 13, 12, 14, 14, 14,
                    13, 15, 15, 15, 15, 17, 16, 18, 17, 18, 18, 18, 19, 18, 18, 19, 20, 20, 20, 20, 20, 21, 22, 23, 22,
                    21]
    stopping_time = [48.46094749999999, 48.211440524629765, 29.35389427027805, 26.084985000000003, 21.342042163193888,
                     19.873697783266667, 18.430533459292796, 14.585379692271765, 14.031537500000004, 12.758127137990117,
                     12.073365340676178, 11.775477501407499, 10.906545, 10.325521214791912, 9.023297436056696,
                     9.392123088558865, 9.737525987087695, 8.96506590909091, 8.608470794062432, 8.54000913604352,
                     7.993092916666666, 8.936374505074888, 8.008509235212225, 7.636317835375099, 7.961952916666667,
                     6.896281785714287, 6.5172846428571445, 6.9801026175359535, 7.068176908376301, 6.627122667580616,
                     6.5646569999999995, 6.284052333333335, 6.485042333333333, 5.593877739713343, 6.169697187500001,
                     5.300613055555555, 5.804266764705881, 5.457649722222222, 5.194901550205683, 5.460612499999999,
                     5.040573421052631, 5.520433055555555, 5.310848611111111, 5.133827911987379, 4.944062749999999,
                     4.681220408441104, 4.915737250000001, 4.83364275, 4.840786250000002, 4.711007857142857,
                     4.393858591152619, 4.346875869565217, 4.483507500000002, 4.676887257837196]
    stopping_time_std = [11.783867500000028, 14.022364475370232, 2.2008592081870555, 2.9613802140796683,
                         7.716882992907246, 4.03576289448507, 3.404684063290876, 1.934063653180374, 2.0321914389476943,
                         2.484445321051284, 2.3206502944509664, 2.623795649158267, 2.0411802538386565,
                         2.2825168516803576, 1.4198596906504033, 1.6540640845316572, 2.0056630341121133,
                         1.7507350145503473, 1.017174570970697, 1.605980503485825, 1.8009937489187158,
                         1.1251840112620557, 1.5732614668373732, 1.1235091851354326, 1.2368580775191544,
                         1.087870910216824, 1.0275567855803096, 1.2019738582238007, 1.082895912327822,
                         0.9945001753900211, 1.1922022855784873, 0.8385282151172435, 0.6926488828792792,
                         1.0451386648179375, 1.0830224577401213, 1.1411517245310474, 1.1497449953019545,
                         0.9699778895626718, 0.8169971119069886, 0.9552919503744821, 0.9452666243788185,
                         0.8957270559191812, 0.9345653407939997, 0.7582923137861753, 0.9749965930734674,
                         0.6952082127320046, 0.8863960723743584, 0.8598280086571094, 0.6574115708155466,
                         1.0581573029923586, 0.8101234136974022, 0.6980254033157361, 0.7819350485595411,
                         0.7296675350919508]
    plt.plot(Fs, lyaps, label='d={}, K={}'.format(N, K), c='g')
    plt.fill_between(Fs, np.asarray(lyaps) - np.asarray(lyaps_std), np.asarray(lyaps) + np.asarray(lyaps_std),
                     color='g', alpha=0.2)

    N = 20
    K = 3
    Fs = [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60]
    lyaps = [0.3463661974612425, 0.5078381409766755, 0.5127150806532665, 0.6718149228511893, 0.8428955978838978,
             0.929383593643815, 1.097639823509303, 1.180839502669605, 1.2457843947436926, 1.310990041151623,
             1.48791426160418, 1.5007721009930677, 1.739972401980403, 1.7750640650227727, 1.6672235464581993, 1.6532142569946482, 2.0014373403378944, 2.0856994886688067, 2.215932964254785, 2.3819630944166508, 2.266682684671246, 2.5431670182814132, 2.4817556984095424, 2.3492617188648404, 2.5284213653262246, 2.620002516011523, 2.8933821683992913, 2.764679917335327, 2.9307250444482107, 2.9750281910834246, 2.7262127139521803, 2.975044154372039, 3.1426680598035897, 3.268868908091814, 3.12319922816704, 3.210701007425883, 3.509326830586052, 3.3927861997253155, 3.385581060381006, 3.4995138231320646, 3.350491935262485, 3.7990851658863716, 3.8343663585559535, 3.768020717305254, 3.5536848687420863, 3.8576707796120684, 3.8627610377730264, 3.813631624729122, 3.8447534491778628, 3.895444561227191, 4.009890030664867, 4.117328830645282, 4.173886321149621, 4.453829112675299, 4.180206135785507]
    lyaps_std = [0.0346701312787997, 0.08293298579712925, 0.05212277478266045, 0.09081044651855151,
                 0.11452516809141491, 0.27844354782053593, 0.28931015345136174, 0.2561495638818931, 0.2942336492723222,
                 0.26035634767129356, 0.2071732705690189, 0.3596048318060386, 0.2534808152889791, 0.269438443435234,
                 0.18876247303020197, 0.3870361333082367, 0.40117241434111883, 0.36528651233942266, 0.3939038853541104, 0.6911913990728683, 0.3802091449136859, 0.4590215376782512, 0.43463346033750294, 0.4017523063289549, 0.44628693745945924, 0.360262419218067, 0.38519787127262006, 0.4746724549216375, 0.4275156285356083, 0.5435166210294006, 0.5354742703848061, 0.5942901917697536, 0.4829804056571156, 0.541549350439828, 0.5858291071792591, 0.5401934163586205, 0.7132820370422038, 0.5350779936659014, 0.6035126946904691, 0.6485019663471849, 0.5805633684408105, 0.6202880592704292, 0.8236746225482754, 0.5806441204570988, 0.6234433522133355, 0.6425173415990268, 0.6338757128137714, 0.6972151027843384, 0.6406842356677386, 0.8261685871370686, 0.6566648026531017, 0.949912857194767, 0.6458464735477603, 0.9480942340219878, 0.6098342331486042]
    sample_sizes = [2, 4, 4, 5, 7, 7, 8, 9, 9, 10, 12, 12, 14, 14, 13, 13, 16, 16, 18, 18, 18, 20, 20, 19, 20, 21, 24, 22, 24, 24, 22, 24, 25, 26, 25, 26, 28, 28, 27, 28, 27, 31, 31, 31, 29, 31, 31, 31, 31, 31, 32, 33, 34, 35, 34]
    stopping_time = [51.69897499999999, 35.80755508717458, 34.943112500000005, 26.913210000000003,
                     21.387092857142857, 21.32878143093586, 17.21599375, 15.690284380650976, 14.95347365570318,
                     14.075120331951947, 12.16093316312231, 12.448470833333333, 10.390583368114008, 10.262375,
                     10.770657692307688, 11.263450000000002, 9.212778125000002, 8.76843175817508, 8.250386111111114, 8.045358333333333, 8.029536111111112, 7.196335297743961, 7.375319738130793, 7.738076315789473, 7.222704848393502, 6.889692857142857, 6.231753675483643, 6.581229545454547, 6.18312496057537, 6.170608247046343, 6.778740939593458, 6.19451875, 5.775038, 5.572241933739833, 5.847282, 5.658243886236955, 5.230094642857144, 5.3544125000000005, 5.424167668829122, 5.218983115155481, 5.455275925925927, 4.790874604555941, 4.836075806451613, 4.821304315559051, 5.129172300978072, 4.719424193548385, 4.7150775623607375, 4.822962903225807, 4.745124193548388, 4.735743548387098, 4.553954687499998, 4.521486363636365, 4.355653649537066, 4.165209999999999, 4.341148529411764]
    stopping_time_std = [5.174451676957883, 5.544909335381232, 3.6316352994455277, 3.9272999497839898,
                         2.654162911588403, 7.894921481389184, 4.22403269462674, 3.15423722786853, 3.1388574028265293,
                         2.8670630660791296, 1.7723938051480708, 2.6911489962152593, 1.4033319758492693,
                         1.8511858835454837, 1.223568663236502, 2.3760520222360975, 1.8168661756576077, 1.5910113269096176, 1.4248984873195853, 2.2010994661067413, 1.267693838395788, 1.2818987934352994, 1.3684951360364106, 1.1566348762516132, 1.2291061522300377, 0.9121025187840324, 0.7903938266942442, 1.007330668368177, 0.9354784774347693, 1.1885781100757424, 1.4565345521623525, 1.2215025658650835, 0.8676275397632589, 0.916941737676765, 0.9301283203099631, 0.8174564269259947, 0.9073079176624947, 0.8231876343374274, 1.086392195228089, 0.8405751118731546, 0.9870650784652774, 0.762936245463281, 1.0119756668633124, 0.7519285749120662, 0.8166310753337964, 0.7598921748002763, 0.7736515213234351, 0.972676842437657, 0.8066680016354247, 0.8779420408188643, 0.8214807846476548, 0.9665701840089245, 0.7261419763683892, 0.8928031206701338, 0.6924668868512751],
    plt.plot(Fs, lyaps, label='d={}, K={}'.format(N, K), c='r')
    plt.fill_between(Fs, np.asarray(lyaps) - np.asarray(lyaps_std), np.asarray(lyaps) + np.asarray(lyaps_std),
                     color='r', alpha=0.2)

    N = 20
    K = 4
    Fs = [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
          34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60]
    lyaps = [0.6822013714405342, 0.6029990619536066, 0.673703040980974,
             0.8248658538846525, 0.7461298758815894, 0.9043111059856077, 1.0330404631584817, 1.116590412584017,
             1.2362253097829146, 1.3602180093561047, 1.4348078985819197, 1.3251926209964755, 1.478126408373502,
             1.8460361772907277, 1.9524206820955932, 1.7933694418826764, 2.2483939313310466, 2.411177303663568,
             2.161708783123776, 2.510703871604548, 2.604416220023147, 2.6385501887930025, 2.9323106770269813,
             2.9924249573416084, 2.7342550530695093, 3.173687341198848, 3.135158763360219, 3.312716570107632,
             3.4246469091234624, 3.3046062054585095, 3.6247765578050073, 3.6946160572497044, 3.553822193019498,
             3.665130014717704, 3.742697448841855, 3.8971960565075516, 3.905132726418852, 4.012404528101444,
             3.8545021155722736, 4.309775173011383, 4.1457725024149354, 4.217615855404488, 4.200635178569929,
             4.249900757691781, 4.76761807240114, 4.5496402525665935, 4.676648953670138, 4.399963213069314]
    lyaps_std = [0.13007978220492747, 0.10553361298201591, 0.1375776351687508,
                 0.16971970280748466, 0.13049149353731584, 0.2961889648427039, 0.20175482011802218, 0.26654784667308934,
                 0.3478334949872173, 0.3328561823684878, 0.2599932912136238, 0.30548539951197984, 0.22346758524754007,
                 0.49373451892405024, 0.5759129165859546, 0.47421036385747034, 0.40716430922313673, 0.4927834042662485,
                 0.47721173587502846, 0.4951426866904079, 0.4905475038865814, 0.7550161774499238, 0.8706715092149786,
                 0.7286374014485123, 0.47608324496810855, 0.7827411008255643, 0.7911441455890208, 0.8956526756412535,
                 0.9171268708684585, 0.9358265647942068, 0.8403516770417414, 0.850620454877504, 0.7975228760771944,
                 0.7908552515415214, 0.7546593069901276, 0.940681076436354, 0.9846285318022573, 0.8992097269511108,
                 1.0037706482462785, 0.9746006872202658, 0.9550119545139614, 1.159914086392609, 1.0353628536751998,
                 1.042718905859394, 1.0920099959960423, 0.9810256768153433, 1.1510089978181308, 0.7404883375977876]
    sample_sizes = [7, 6, 7, 8, 8, 9, 11, 11, 12, 14, 15, 14, 16, 19, 19, 19, 24, 26, 23, 27,
                    28, 27, 30, 31, 29, 33, 32, 35, 36, 34, 38, 39, 38, 39, 40, 41, 41, 43, 40, 46, 44, 44, 44, 45, 51,
                    49, 49, 48]
    stopping_time = [27.10194053167205, 30.323224999999997, 27.43459949860034,
                     22.419011454542478, 24.6331395389392, 21.525503599691437, 17.776240909090912, 16.82761774512639,
                     15.570745833333334, 13.744807276413132, 12.748600841505707, 14.01479817746376, 12.29482534270435,
                     10.246740509292193, 9.875513157894737, 10.520086842105265, 8.136354183737312, 7.627571153846156,
                     8.60847746656755, 7.36040419285981, 7.0938875, 7.233277049683032, 6.457357567569308,
                     6.282056451612901, 6.683077536810538, 5.90954173278719, 6.0000234375, 5.699187142857143,
                     5.517699715961037, 5.765757352941175, 5.162192933432161, 5.028155128205127, 5.217161842105263,
                     5.062247435897435, 4.934810999750544, 4.794545121951219, 4.824083821824465, 4.650689534883719,
                     4.908638749999997, 4.300888043478261, 4.499630284448462, 4.504348863636361, 4.49853674541395,
                     4.4359957545106665, 3.9071343137254892, 4.07584145825363, 4.001394897959183, 4.1413593749999995]
    stopping_time_std = [6.017030289392453, 5.2918866251910455,
                         5.555815664904473, 4.580533530921043, 5.119622865483952, 6.226001596526365, 3.1820839927472857,
                         4.058246935104738, 4.525095741831545, 2.9857242830789614, 2.210828513990297,
                         2.8166811815702193, 2.0474310452237408, 2.497607649354822, 2.7945886914178546,
                         2.5261794122564316, 1.4304176566290128, 1.375837119659778, 1.9493815899469682,
                         1.5490694699946754, 1.5733179421055346, 1.8971562631746357, 1.4736922516236348,
                         1.5003074374719052, 1.171137952269265, 1.358181632000417, 1.4005361176965418,
                         1.3724704313775427, 1.3872141988527782, 1.4670926190978868, 1.1989791464860975,
                         1.0195257052381892, 1.0584441531668307, 1.0658604859376344, 0.9996298042764545,
                         1.0735161027368558, 1.1906730106223948, 1.0506490766903784, 1.2181377259445592,
                         0.8553927422699696, 0.9915062964682775, 1.1264669206764868, 1.1725387543557804,
                         1.1373600924478653, 0.8579693192080873, 0.8441495137243257, 0.8846951921189409,
                         0.682219135226209]
    plt.plot(Fs, lyaps, label='d={}, K={}'.format(N, K), c='m')
    plt.fill_between(Fs, np.asarray(lyaps) - np.asarray(lyaps_std), np.asarray(lyaps) + np.asarray(lyaps_std),
                     color='m', alpha=0.2)

    N = 20
    K = 5
    Fs = [27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56,
          57, 58, 59, 60]
    lyaps = [0.21547466072945687, 0.36878344351946896, 0.27304653244318494, 0.23550827263362195, 0.3176152461392702, 0.37493143377264665, 0.5244823976323965, 0.48304350718128974,
             0.7477687925479319, 0.6731470824399696, 0.847856730009533, 0.6446225585097962, 0.9927008494623839,
             0.9551366945042012, 1.084545990778434, 0.8387100865057379, 1.081518057394003, 0.9917810330967278,
             1.189667944165387, 1.0865704180831075, 1.4421329423134752, 1.2421259336086539, 1.4611293142183295,
             1.5326881009581108, 1.6356525595372182, 1.4782957468623423, 1.616174890461305, 1.5758006402486227,
             1.5879598713904657, 1.9977410989909914, 1.7612955994536104]
    lyaps_std = [0.036346929678492276, 0.025940069667759188, 0.010239096762548527, 0.007317120472988672, 0.08028721123210573, 0.07524729492167449, 0.10651850175680654,
                 0.03730072616700951, 0.19684169121252323, 0.15700231844133294, 0.15396495543021144, 0.2014342660170266,
                 0.32338923870034114, 0.2017556998668041, 0.29662479852615853, 0.18766491054385567,
                 0.2628485318751678, 0.2756855434942375, 0.3138884716775959, 0.17299296191281388,
                 0.4119906366120897, 0.21945367068684196, 0.32649642373487925, 0.31858202057739515, 0.3466437950490917,
                 0.25308618391884524, 0.5962861404771879, 0.24393576949508097, 0.30105879060416396, 0.5173833627757743,
                 0.40229211652522096]
    sample_sizes = [2, 3, 2, 2, 3, 3, 5, 5, 7, 7, 9, 6, 10, 10, 11, 9, 11, 5, 12, 11, 15, 13, 15, 15, 17, 15, 16, 17,
                    17, 21, 19]
    stopping_time = [4.68946507683556, 48.25295, 65.07510482034775, 75.34623949927655, 59.62664082703219, 49.51298333333332, 35.223650000000006, 36.95968431840228,
                     25.12691266440431, 27.883321428571435, 21.6169010192395, 30.188880312672282, 19.661865,
                     19.500065000000003, 17.540886363636364, 22.216187407227558, 17.31666950132764,
                     19.193864219658906, 15.93166663861163, 16.72802835552102, 13.20430492667734,
                     14.810188461538464, 12.701406885281019, 12.099370000000002, 11.323773529411763, 12.34779,
                     12.128278125, 11.522748754659753, 11.53982058823529, 9.495040476190477, 10.502855263157896]
    stopping_time_std = [14.276415076835505, 3.545384380430428, 2.3793548203477073, 2.340968771234877, 15.32765424145806, 11.32033309448181, 7.184809189529997, 2.9838794633799735,
                         5.519111002373882, 6.7944851035004925, 3.9377100385047337, 8.799697273913369,
                         5.758876292529322, 4.538617257061164, 4.535151068922753, 4.991451351513142, 3.890926557361524,
                         4.826045832303075, 4.055574834521585, 2.5722343227409508, 3.417586336394353,
                         3.042697938114482, 2.699206198909771, 2.6156728287958715, 2.3334288955888054,
                         2.088607005568755, 3.523689531564814, 1.7964671931963867, 1.9947334482999337,
                         2.500099432577457, 1.9955946757702347]
    plt.plot(Fs[:12],lyaps[:12],label='d={}, K={}'.format(N,K), c='grey')
    plt.fill_between(Fs[:12], np.asarray(lyaps[:12])-np.asarray(lyaps_std[:12]), np.asarray(lyaps[:12])+np.asarray(lyaps_std[:12]), color='grey', alpha=0.2)

    plt.plot(Fs[12:12+5],lyaps[12:12+5], c='grey')
    plt.fill_between(Fs[12:12+5], np.asarray(lyaps[12:12+5])-np.asarray(lyaps_std[12:12+5]), np.asarray(lyaps[12:12+5])+np.asarray(lyaps_std[12:12+5]), color='grey', alpha=0.2)

    plt.plot(Fs[12+5:], lyaps[12+5:], c='grey')
    plt.fill_between(Fs[12+5:], np.asarray(lyaps[12+5:]) - np.asarray(lyaps_std[12+5:]),
                     np.asarray(lyaps[12+5:]) + np.asarray(lyaps_std[12+5:]), color='grey', alpha=0.2)


    plt.xlabel('F')
    plt.ylabel(r'$\lambda_{max}$')
    plt.title(r'$\delta_{start}=10^{-8}$, $\delta_{stop}=0.5$, $dt=10^{-4}$')
    plt.legend(loc=2)
    plt.grid(True)
    plt.show()

# DIFFERENT F, N=20, K=1,2,3,4,5 STD, AVR
if False:
    fig = plt.figure()
    # delta_start=10 ** (-8), delta_stop=0.5, t_stop=100, dt=100, evolve_first=100
    # NlogN trend

    N = 20
    K = 1
    Fs = [i for i in range(5,50)]
    av = [1.8417619961172524, 2.0358492996298168, 2.1585766841019867, 2.3465724794111873, 2.551349542761034, 2.6206734142879173, 2.654021584798356, 2.793080853732342, 2.8995791484074434, 2.985808155231632, 3.0347893209347587, 3.0951721484798838, 3.2050118596683346, 3.1384764909585474, 3.2411947378417563, 3.345123018721042, 3.3761510451378736, 3.489432154401925, 3.4847665616275627, 3.5562451241750663, 3.5643162003879465, 3.689519504877306, 3.5639502322461043, 3.8036474261020223, 3.8593706231900753, 3.786352085488217, 3.8184789453984274, 3.9344084837374975, 3.9584154859289877, 3.911182456357454, 3.9923145656387207, 4.036144569726393, 3.9605420258784694, 4.077425047037419, 4.16284178188691, 4.241608800336681, 4.208112103909533, 4.374836623584902, 4.198606300266576, 4.521030773422027, 4.268696639209325, 4.236653691452767, 4.45336880873826, 4.467258776794067, 4.457240383927319]
    ma = [8.308960799986902, 10.722408697969895, 11.798569642012751, 13.559113688710326, 15.683911675513029, 17.5562323047577, 17.086168991489046, 20.207287797859472, 21.47827733892492, 20.82417338904999, 24.261737758510684, 22.856661836688847, 24.156754577853746, 27.37281317223713, 28.856873029643538, 31.230996839633686, 32.44062119991289, 28.71184418637648, 30.926034267975798, 33.02606918587933, 32.42853352028456, 37.58107852274107, 35.15281565356859, 39.834499606236115, 39.257362710389295, 41.38948098961603, 39.51060798687832, 40.141597427187854, 42.69808293234595, 40.70353891944489, 42.92107552592936, 45.43367346815726, 44.28524687986459, 42.87850878397373, 49.19098616784025, 53.060853024438764, 48.07891516175089, 46.56038064676797, 49.07947622432434, 52.38412479572351, 49.4981614187888, 61.977732749740646, 53.66984804270533, 58.066167550088714, 55.790248140694246]
    mi = [-4.55515252589475, -6.0865560782581145, -7.385079322918224, -8.879114343353338, -9.964386403571611, -11.840917687681525, -12.255988688697405, -14.421605971430834, -14.698215228945502, -17.70059524987844, -19.852664045503996, -17.10708488879547, -18.038798031628914, -18.906508579487838, -19.54294411722887, -22.741706753346428, -23.143106130829498, -22.317348609881652, -23.18834095743287, -25.482720725999684, -26.674943786728257, -26.77669669170381, -28.395373492050176, -26.87787205317548, -30.765758820761924, -31.358675168771455, -30.181053166557174, -31.15622217950582, -32.289948816572625, -36.479744489058604, -29.951732905598256, -33.82368929487973, -34.97500413981071, -33.05675834059372, -37.71711507796507, -39.36775114276546, -38.119164279335166, -43.01682316711547, -41.27000561377473, -47.610674443014325, -40.971122724404836, -43.50613273876869, -42.350007689555575, -47.238459322800296, -45.18624168618254]
    st = [2.413015987919968, 2.8394462861736445, 3.237352545853578, 3.6435985274267053, 4.0545774782463155, 4.399667460133784, 4.707665463590617, 5.073195589165149, 5.409994566985956, 5.729257071306617, 6.024901643886216, 6.310840895587282, 6.650117701509504, 6.824750289873104, 7.152437654882448, 7.466213704627695, 7.724392516286487, 8.038801376862155, 8.24515924335416, 8.531616010023804, 8.741287321909885, 9.058695214953257, 9.1426755119333, 9.58298530725153, 9.845151760545045, 9.968444447187261, 10.177596321273299, 10.538088514622027, 10.729160022554433, 10.849569290784919, 11.106620500630665, 11.376108380558941, 11.436797071765424, 11.766470738436796, 12.059927831356756, 12.330385334483747, 12.451035552909795, 12.826064381281185, 12.785671230805887, 13.339023281985982, 13.23859071465917, 13.315263285895778, 13.771126596145365, 13.949907775850948, 14.055169760356915]
    true_sd = [10.780538838334117, 12.68534312535888, 14.443598812889917, 16.24434292187643, 18.067388657706125, 19.63682300841768, 21.024873328197394, 22.663840173668255, 24.150819776192392, 25.56168582837919, 26.91519993642419, 28.195832522169987, 29.71237181865591, 30.503144356572598, 31.960567048169523, 33.374085417828965, 34.52755095675788, 35.920690105694995, 36.84213148183036, 38.12015183926756, 39.062705302555024, 40.463415493549284, 40.85780720459369, 42.82727043727428, 44.00256670530469, 44.54983016535802, 45.48312457298684, 47.07579254465239, 47.92871022289336, 48.50357769372403, 49.641045207530055, 50.813452680539214, 51.127000843647686, 52.59181279562729, 53.90137189662786, 55.09128743854693, 55.6260203797469, 57.303592459816684, 57.14427623558554, 59.606921329083875, 59.177674146514484, 59.504773687934524, 61.54798032885532, 62.32424805786261, 62.79968525804387]
    #plt.plot(Fs, av, label='d={}, K={}'.format(N, K), c='b')
    plt.plot(Fs, true_sd, label='d={}, K={}'.format(N, K), c='b')

    N = 20
    K = 2
    Fs = [i for i in range(5, 50)]
    av = [1.2416947724957477, 1.6717314970148875, 1.7503056883874346, 1.9432564384129958, 2.0363231078822284, 2.188222281412582, 2.2989300620337922, 2.352074419711028, 2.360901069931892, 2.433092695494551, 2.6356880365979922, 2.4914617751425676, 2.643367541541104, 2.6726969864316974, 2.725761245087028, 2.8365508803268997, 2.794858121873326, 2.788928209293243, 2.8947689990187295, 3.1044848866791104, 3.0274709235851804, 2.9428682965498423, 3.13850612330111, 3.031426721763998, 3.2167514320700765, 3.0881497557604964, 3.2834439223648233, 3.1812074469723908, 3.3318920515825323, 3.3304101216780735, 3.32081333344927, 3.2567730851082732, 3.3368046568440186, 3.4071963025157426, 3.470756405710185, 3.3881584259389057, 3.4444472861769775, 3.378535676405058, 3.5525443514693382, 3.4735954480547466, 3.466107047165169, 3.6823577269177696, 3.53660253346308, 3.5638157089917093, 3.620855414324043]
    ma = [4.837879875891876, 9.519022539200487, 11.290360383957907, 12.58382742551101, 14.938282840055324, 16.167148672564483, 16.770339702778983, 18.47805447099198, 19.54617816176158, 20.36615706456282, 21.157687638845548, 22.33634979429313, 23.517779248026983, 26.220088303255512, 26.51523381446287, 26.258880236123264, 29.29795554279522, 28.56767966616402, 30.53299220469398, 32.17406539898561, 31.660910051088333, 34.32644654936674, 33.87488942767967, 36.135553911630225, 36.612502291305105, 34.987306613137044, 40.03537224018679, 38.3623952704718, 37.47362154127611, 40.03964811318157, 42.47466945234329, 44.642966593001496, 39.819509597215045, 43.23997655469005, 45.80506721190198, 45.979282869681555, 41.56588713575598, 46.84620440707884, 46.25277209904816, 47.12702419601011, 53.13534328708103, 54.702755290560226, 47.80613520280195, 51.601153706838204, 48.13042516572645]
    mi = [-2.5422504095575595, -5.665959795084012, -7.47604983944555, -8.93815732677332, -9.514885169414688, -11.056192234293844, -11.852035457595195, -14.672087749265996, -14.705702630243314, -18.05927130647234, -16.508143285646767, -16.530257080765345, -20.479252340732607, -18.553337670263655, -22.772443522081268, -21.696324596634156, -24.25207131404466, -21.0564488343459, -24.929776355091448, -22.903672888164536, -25.33796935162663, -23.736161241832967, -27.150023167251575, -31.150074501475654, -30.273802289397434, -29.022845818299327, -30.244518173488174, -29.614054309442967, -31.91637862563875, -33.44160211204111, -31.596416918921694, -33.99685697200225, -34.94151543078257, -35.24975914780798, -33.90348010003059, -36.94217137718334, -39.36601360279982, -39.19485128687949, -39.03598717104885, -45.260051801891876, -39.69237467169803, -42.566713862156135, -40.92445207973912, -42.32766478429481, -45.313789351566356]
    st = [2.1602992613432046, 2.687632356457051, 3.028624544883627, 3.431318624949849, 3.7694532050856155, 4.139540038558342, 4.471924701589669, 4.77320059389144, 5.0184433154702255, 5.302189231558013, 5.707864559498595, 5.804083004038173, 6.151500836469818, 6.40069649287554, 6.6467299274011085, 6.972853743569532, 7.128913461906824, 7.331859607672339, 7.635562239572483, 8.051931274809649, 8.152684671437799, 8.246682297856413, 8.657309155454259, 8.69185646658835, 9.114275910552935, 9.10602469618054, 9.535639765626993, 9.577671287276589, 9.921940738165508, 10.106752888682703, 10.24908669095255, 10.350647720436541, 10.602196799334749, 10.857630280164088, 11.100003438130983, 11.132477740700718, 11.361496619123127, 11.443286718987027, 11.816726133313896, 11.857267641676534, 11.990891704994175, 12.476072010231743, 12.412495687174996, 12.568524510976605, 12.825220589864879]
    true_sd = [9.66091874647628, 12.011855419510768, 13.527150513418327, 15.300195597862562, 16.817917868797824, 18.355485151246928, 19.915830108977335, 21.31186196011312, 22.424823174441546, 23.688073647930825, 25.47364911725999, 25.899117572071443, 27.452865887220533, 28.563452589350135, 29.658747085739936, 31.115270081126678, 31.83539139120265, 32.74962106539141, 34.081759080501826, 35.97541472540691, 36.39600726757976, 36.84272832758298, 38.62607861329651, 38.83969990618982, 40.70879115346803, 40.62070048854876, 42.576574177506615, 42.72976697872801, 44.30926435226986, 45.101894492778484, 45.75644071432019, 46.20824796972321, 47.28568569551773, 48.4822477329383, 49.48344822959455, 49.738314949865476, 50.736931765465776, 51.077313454950755, 52.78609898769422, 52.96063371992232, 53.576084162623694, 55.72993149118203, 55.38239362693363, 56.13906913258651, 57.25350472193526]
    #plt.plot(Fs, av, label='d={}, K={}'.format(N, K), c='g')
    plt.plot(Fs, true_sd, label='d={}, K={}'.format(N, K), c='g')


    N = 20
    K = 3
    Fs = [i for i in range(5, 50)]
    av = [2.5510749005575324, 2.6190569530538936, 2.7224297955160717, 2.785821207589921, 2.821157007300579, 2.8753480532559617, 3.0906809945607217, 3.178449043601236, 3.266938421371768, 3.256014123332506, 3.3083233125672793, 3.404195691266084, 3.3939761261346146, 3.5645686473183638, 3.7159174854800585, 3.5947103776528873, 3.6925790005118957, 3.7187413360422856, 3.787411083347548, 3.96053922851865, 3.960666529761161, 3.7160067588539283, 3.9424790747295986, 3.8854257989133503, 3.9676857557301197, 3.980455429376395, 3.9246155730866557, 4.175628647633501, 4.20231322271606, 4.1492686831365715, 4.173383797220655, 4.2163549350705765, 4.256908304388853, 4.423118166379499, 4.090238263377092, 4.37707875411007, 4.342625847458839, 4.443766358904299, 4.362838255960846, 4.479935911644124, 4.497759479565372, 4.506998741720858, 4.551631790446456, 4.621532599006826, 4.4348311673694525]
    ma = [8.085975868871811, 10.368023239194791, 12.228795256881288, 13.597044532388448, 14.352304788141614, 15.50782263013595, 17.151827709167794, 18.289488650518642, 19.73753011213458, 20.8670079002815, 21.030329373586422, 23.473355860002656, 24.545351295066702, 23.65358103157174, 27.929617068417066, 25.297074624965934, 28.023292118723802, 27.65855917129223, 31.263058595175, 31.097362286127126, 33.404468726776, 31.036306519142006, 33.07622817343172, 35.17784922643866, 36.201565287048126, 36.9631602274662, 38.12970126255976, 43.09295671827766, 38.98849586977346, 42.00839010105446, 45.61862034619345, 41.457416093725335, 46.215643008782244, 44.14092671559689, 44.40954726713551, 46.62863194786159, 50.875118053771864, 47.20523414174853, 50.9710408554868, 51.08858658681709, 50.50909458144808, 56.4026615832325, 53.72840218905164, 53.27323328877273, 58.37753533119523]
    mi = [-2.245840268658302, -4.32853454511584, -6.055855907232948, -7.009216830404867, -8.685637884890184, -9.387756626178248, -10.865088379421197, -12.064815927105574, -12.88345495574106, -13.525358792420942, -14.803780851926081, -16.70955513942308, -16.016324946783698, -18.725932363259428, -19.976057518601223, -18.569110517786708, -20.80685782961291, -21.3765698567728, -22.927379580927862, -26.25995750819317, -25.437860215804477, -25.295525624769848, -26.214573338591094, -32.88984384621549, -28.768363855027594, -28.78960052802745, -30.59236465103711, -32.5751210758956, -32.92415301971087, -31.76737399609879, -33.2681589418604, -37.03568014691632, -37.340885112507806, -37.38890015784012, -37.8085832840475, -39.83320857857055, -39.55106729814944, -35.51646523798255, -39.02575465527243, -40.17668503298062, -36.52680814044329, -40.503111056375, -40.75575733992831, -47.07456907380724, -46.783241003120764]
    st = [2.4996724620415067, 2.975375251410482, 3.410170962501102, 3.808467587580639, 4.176047298646323, 4.523256626741379, 4.944868989045649, 5.292561090773975, 5.6409186012163435, 5.909242138927209, 6.226017163332207, 6.544785041100948, 6.797644328644785, 7.161815528202663, 7.531810558701348, 7.672413117558974, 7.989011594622652, 8.243697247773618, 8.516750108182482, 8.908878792607338, 9.126957645675835, 9.098240389232751, 9.52826781630509, 9.6667409823627, 9.974271272087169, 10.17562332575166, 10.310753403054633, 10.79268702387664, 11.006808934455321, 11.134374903348451, 11.357609362639737, 11.586202194976266, 11.794645488150401, 12.171675560870732, 11.955268751032712, 12.48328990513914, 12.602859226959612, 12.933688645318872, 12.993740977850363, 13.277989902822654, 13.476715701451763, 13.668464796960084, 13.907802452416293, 14.143843642191003, 14.075431344625446]
    true_sd = [11.177626016423615, 13.289136365311723, 15.23049105858519, 17.018996996125107, 18.653811584854033, 20.1902666623755, 21.91625769552703, 23.180951157539162, 25.051535137189788, 26.31096621671676, 27.553870450172912, 29.12462527186211, 30.354242785892573, 31.96910031426404, 33.64263970378223, 34.20720081376476, 35.63644572149936, 36.59800931755926, 38.0354038877423, 39.78034330285574, 40.70756137751718, 40.58075477392475, 42.51322736322795, 43.115646449218886, 44.55754654466035, 45.40378126787757, 45.93855351901152, 48.154580908195655, 49.13414876301216, 49.70553904777512, 50.75220980706113, 51.782085865626414, 52.692075712009874, 54.391634806145355, 53.3502791175942, 55.69913043627262, 56.23739132791168, 57.59435162693705, 58.02818858740938, 59.31219716172707, 60.1209923747531, 61.04244628449204, 62.06873415304342, 63.19195806089253, 62.85545216595698]
    #plt.plot(Fs, av, label='d={}, K={}'.format(N, K), c='r')
    plt.plot(Fs, true_sd, label='d={}, K={}'.format(N, K), c='r')

    N = 20
    K = 4
    Fs = [i for i in range(5, 50)]
    av = [1.2280480889219492, 1.2588795708544231, 1.307442702800657, 1.5437537267946715, 1.760924132394257, 1.9031660977004128, 1.9878746151060724, 2.067618006774, 2.215677810779042, 2.24852792415456, 2.282740054394618, 2.3493656094010484, 2.394390666025107, 2.4529866347104674, 2.484178955994561, 2.5345755075700516, 2.658966631752714, 2.7838910049884587, 2.851173764087385, 2.843322100866894, 2.7954250849583953, 2.9763590110899427, 2.954139381202528, 3.3068185681927114, 3.32567785228295, 3.32283254373145, 3.523162089189584, 3.4697541657615116, 3.475463730688888, 3.63722782279807, 3.7087764654176825, 3.7359492486330126, 3.835909382290188, 3.8667082250079767, 3.7947208668517582, 3.797478977887036, 3.88639136674403, 3.930300440645168, 3.959114181865778, 4.113999642048712, 4.001772254628951, 4.104685429155841, 4.161978648628293, 4.231640105081276, 4.421153356780062]
    ma = [4.498097417963153, 4.968128167598717, 5.82356634059233, 7.451222566782823, 8.646150236358693, 9.593830141328622, 10.413955927335538, 11.240196261177614, 12.646775972908518, 13.641888893240102, 14.93719805071212, 16.35469656041184, 17.11708037430162, 19.42460434359303, 20.427943293983752, 20.496934853028566, 23.262983672303903, 23.4030517086783, 25.14856317851618, 23.435603126922437, 25.36494716753665, 27.4321657038948, 27.054572187338422, 28.916958418033865, 29.575202361558944, 29.112909610726966, 33.12613391917127, 33.549421108696656, 34.24169181732839, 36.74882302447856, 37.58617517402938, 36.77581276971981, 41.58372449360293, 37.59507506861377, 37.85956079012636, 39.279203519377226, 38.30926451595666, 40.07120285974177, 48.56732744990054, 44.29235703938771, 44.860499620835476, 45.2099939560035, 46.33823546798801, 46.573431767288895, 46.10047125315264]
    mi = [-2.32214032482416, -2.820093886972985, -3.5489203132575464, -4.5984405365724115, -5.444982805116928, -6.462767619426642, -7.322715356378287, -8.15330765289708, -10.09720174534391, -11.691593328349775, -13.106673040446072, -13.75490460343401, -14.983203420652682, -16.243358242213816, -17.820746805367307, -18.10856836962037, -19.639099815123082, -20.66353663923651, -22.522359563211722, -23.271868204239773, -21.830625829402518, -24.965402815379303, -25.034837964690592, -26.018857366477643, -26.167586937213706, -28.346652116541556, -34.69262632096565, -29.337516237601363, -35.876413611201976, -31.57288221224073, -32.86410816147987, -38.32228681634955, -35.554886674030804, -38.168797269979656, -36.73259515966396, -38.363088871391554, -39.95547691964071, -37.60016884098483, -43.742286501113064, -42.731039327651224, -42.25926630719351, -40.726080526790255, -45.38973434034061, -44.06255252143905, -44.27658010968493]
    st = [2.1522403062633946, 2.4430512993224767, 2.728016377078196, 3.1562584362352544, 3.570368121110247, 3.9255528992944617, 4.232108392641212, 4.533328862105793, 4.8912963012974195, 5.140659659902709, 5.3830845677124035, 5.665858029498884, 5.9228136787057, 6.184029124766121, 6.401615178238418, 6.66527751438743, 6.985355756194849, 7.309981273545185, 7.584428704590823, 7.74576110229368, 7.876603232239796, 8.270075256067301, 8.437165280104573, 9.029826569043337, 9.225476631222271, 9.429640237126149, 9.844622637702171, 9.945678178338763, 10.134811878738267, 10.530020720089674, 10.774550791202053, 10.985994107857366, 11.261470100726434, 11.514363188196347, 11.567558843160775, 11.728447726083786, 12.006420395824286, 12.224857619653488, 12.43385745483178, 12.822208491401897, 12.806717485491626, 13.116536780746573, 13.315680220829538, 13.610727194262694, 14.05046707152092]
    true_sd = [9.624969252809326, 10.925425351332839, 12.199869415733886, 14.114812008878463, 15.966664817284206, 17.55522367970506, 18.925978638860933, 20.270259511161893, 21.847583012013477, 22.981257498373004, 24.036867883366263, 25.317229496849187, 26.476250938971265, 27.547879978812276, 28.611121686646293, 29.725322539193655, 31.17418166145498, 32.67743491152168, 33.87852890852495, 34.61486153562473, 35.21362155163917, 36.93869897784145, 37.697856377037795, 40.33297317370009, 41.24100775182446, 42.11293957303714, 43.95637083314058, 44.383554116266346, 45.26581482560118, 47.006395540883474, 48.13405907340087, 49.06038142586147, 50.33839797578281, 51.462070344456286, 51.69611064334109, 52.39335782852572, 53.6098432739408, 54.582303509899155, 55.56863394271636, 57.292396079245584, 57.21328739548213, 58.60676472664191, 59.482493855347, 60.76029293273557, 62.74457905561638]
    #plt.plot(Fs, av, label='d={}, K={}'.format(N, K), c='m')
    plt.plot(Fs, true_sd, label='d={}, K={}'.format(N, K), c='m')

    N = 20
    K = 5
    Fs = [i for i in range(5, 50)]
    av = [1.4663866363068052, 1.5324399361231473, 1.591857087982758, 1.6458623767855671, 1.6953800399204768, 1.7411211838327296, 1.8212912800234415, 1.9973305972830275, 2.173853558620872, 2.3512572345461114, 2.5256521821181015, 2.7005080088703965, 2.8733748528163425, 3.0465820467998657, 3.189454181587971, 3.128840386986284, 3.0677497865486583, 3.0528991205377856, 3.0286654650801843, 3.1408608902337156, 3.015850328945175, 3.017039655877446, 3.039421302766878, 3.0637856671074077, 3.0828978642632268, 3.0384318184265364, 3.0708149343578164, 3.075138625773874, 3.2087902248895714, 3.3175833564007453, 3.432450335784218, 3.4577111301575276, 3.4822389559417126, 3.3619209900150446, 3.296728358041263, 3.396249090685408, 3.531747245747861, 3.4750153965898725, 3.527122457212305, 3.495645666098249, 3.727271242869196, 3.169986557962199, 3.378569637299009, 3.684126481418943, 3.7797919380902445]
    ma = [4.965809276411417, 5.5734807377083495, 6.135996936595248, 6.662610047964824, 7.159728998636948, 7.6321409729272505, 8.449319893629708, 9.473277213222836, 10.499668561993893, 11.585938281633638, 12.680270573140836, 13.764672850396861, 14.827914822453968, 15.863170776839297, 17.219090920359392, 18.3846864514148, 18.95786134574903, 19.51901747109793, 20.146835154834175, 22.34803332340115, 21.376845006225913, 21.988752759873407, 22.589949765352095, 24.812689137014672, 26.194158058970267, 26.053039090341134, 26.390220564339174, 27.230941355377848, 27.099818264884423, 29.6178475659131, 31.995173933668646, 30.18720172678788, 31.31113083250319, 30.98788482779513, 27.01792984183811, 31.509956855484344, 33.84964802157846, 34.08911956365248, 36.55604804371167, 35.05118112550237, 37.07966695782297, 29.888104246308448, 30.561493683671994, 38.69548824706177, 41.665572021841236]
    mi = [-2.1645967389181515, -2.66685603516874, -3.1384037887464387, -3.5858270791993, -4.013456723601428, -4.4246712199681255, -5.581413609300317, -6.626090408215814, -7.422123294978261, -8.198779471740465, -8.975406339690856, -9.777160696548364, -10.605657350086858, -11.483997273637154, -12.487902819928618, -13.803976978691905, -14.24854393645, -14.631448261578113, -14.916578872168614, -16.57038974515032, -15.463365862724633, -15.682010106149539, -15.967529893991443, -18.730389740560813, -19.63436568447315, -20.08935554083757, -21.19357805829771, -20.722379130806395, -24.367470379717776, -24.765904722975833, -26.451932349694946, -27.227265486226454, -29.082160667015685, -29.95863727215943, -24.430955338290662, -27.982152178313658, -29.38952001530487, -30.831200157215633, -30.13867327801386, -33.38423871471039, -32.3133928013026, -27.812064021096003, -29.946356574884256, -32.93308167900859, -33.674701267899756]
    st = [2.276322344132033, 2.6165373031764023, 2.934108148538186, 3.23388868871008, 3.519105977314824, 3.792058244434699, 4.087783890772095, 4.4695821510142295, 4.852321382348099, 5.232544011842147, 5.6148680548026455, 5.995045298477035, 6.372593904137211, 6.746704277794724, 7.105475945340055, 7.258855435668115, 7.415084725854647, 7.600999311149544, 7.782062311824329, 8.093401045798158, 8.14698302605737, 8.34000540961783, 8.536504800704618, 8.742940951814647, 8.945665583715066, 9.04441058774045, 9.271832968829537, 9.41094719518966, 9.77988582831202, 10.080834033330644, 10.40582172283084, 10.616970424611218, 10.792056458337578, 10.802080018940512, 10.869808876084958, 11.147443598860333, 11.518625005264951, 11.54105873267279, 11.79041076775246, 11.9015979597971, 12.40191921139109, 11.670760529437636, 12.141653701165673, 12.800366839931405, 13.060713410506947]
    true_sd =  [10.18002031115718, 11.701249895277515, 13.121381114488317, 14.46218982741287, 15.737858493212817, 16.95826478179074, 18.280728224988543, 19.988275322794653, 21.699912198327237, 23.400471508405573, 25.11022470688036, 26.810101798467112, 28.4977654150512, 30.170637585667595, 31.774801807479783, 32.460920064635914, 33.16042984342514, 33.98784556787459, 34.7999441528465, 36.19183761854159, 36.4278517696075, 37.29730805790436, 38.16607054507918, 39.0632458717334, 39.99666667663587, 40.369662480287275, 41.40397338065749, 42.03742462590692, 43.520672717795584, 44.81208250614515, 46.11371576375156, 46.487576921358105, 46.95855254245029, 46.18205927836269, 47.76598135963325, 49.7494480399279, 51.47296067653487, 51.134036065901476, 52.09566259747538, 52.213950673491766, 55.29540579138436, 46.325315123004756, 53.85361898868854, 56.784587046995746, 58.11670316337938]
    #plt.plot(Fs, av, label='d={}, K={}'.format(N, K), c='grey')
    plt.plot(Fs, true_sd, label='d={}, K={}'.format(N, K), c='grey')

    plt.xlabel('F')
    #plt.ylabel(r'$<X_n>$')
    plt.ylabel(r'$\sigma$')
    plt.title(r'')
    #plt.legend()
    plt.grid(True)
    plt.show()



# DIFFERENT N, const. N/K, F=30 LYAPUNOV
if False:
    fig = plt.figure()
    # delta_start=10 ** (-8), delta_stop=0.5, t_stop=100, dt=10, evolve_first=10
    # NlogN trend
    F = 30
    Ns = [20, 40, 60, 80, 120, 160, 200, 240]
    Ks = [1, 2, 3, 4, 6, 8, 10, 12]
    lyaps = [6.425903162754287, 2.8623357755588326, 3.5262567306836266, 3.340984548647893, 3.31465938675332,
             3.501212353002041, 3.379599454584205, 3.5748568679378123]
    lyaps_std = [0.7805284551547313, 0.5313808099888073, 0.37885760691574494, 0.37579856889671753, 0.35674736497011544,
                 0.37299316929168974, 0.3924516778094461, 0.6851491762913035]
    sample_sizes = [30., 10., 14., 11., 10., 12., 11., 11.]
    stopping_times = [2.803466915136835, 6.3976742645338565, 5.088171853305882, 5.375226563346569, 5.408499639289116,
                      5.122244686051797, 5.322066219042861, 5.113709724203782]
    stopping_times_std = [0.3705691182494211, 1.1390904368348114, 0.5761057710264739, 0.6389848307011747,
                          0.577195444640501, 0.5409535487327323, 0.6472733103899267, 0.8139300814286619]
    plt.plot(Ns, lyaps, label='N/K=20, F=30'.format(N, K), c='b', marker='o')
    plt.fill_between(Ns, np.asarray(lyaps) - np.asarray(lyaps_std), np.asarray(lyaps) + np.asarray(lyaps_std),
                     color='b', alpha=0.2)

    F = 30
    Ns= [240, 200, 160, 120, 80, 60, 40, 30, 20, 10]
    Ks= [24, 20, 16, 12, 8, 6, 4, 3, 2, 1]
    lyaps= [2.9305446580427645, 3.0056851282261308, 2.950488905540891, 2.816707486812431, 2.6965506369088295, 2.792488403097408, 2.7576695407653533, 2.884914021647102, 2.3881489216011342, 5.724788072634421]
    lyaps_std= [0.5253491680126067, 0.5345838732760002, 0.4444769891879242, 0.6793538368065579, 0.47258428821403736, 0.3902398983647392, 0.34969524725673834, 0.35460784963476266, 0.29772686822739, 0.9366957013409528]
    sample_sizes= [10., 11., 10., 11., 10., 10., 10., 10.,  8., 27.]
    stopping_times= [6.252446717496388, 6.094976738464776, 6.142042825281227, 6.5805474339362044, 6.768387702294615, 6.466681203926664, 6.533323599918605, 6.239353721897084, 7.547061109912242, 3.183051385870371]
    stopping_times_std= [1.1444508684811647, 1.1215091640297397, 0.8985132955709932, 1.2167866705871706, 1.1366391747970386, 0.8517513975443596, 0.8298148991411765, 0.7694510599016584, 1.0020996423394355, 0.5566609965894751]
    plt.plot(Ns, lyaps, label='N/K=10, F=30'.format(N, K), c='g', marker='o')
    plt.fill_between(Ns, np.asarray(lyaps) - np.asarray(lyaps_std), np.asarray(lyaps) + np.asarray(lyaps_std),
                     color='g', alpha=0.2)

    F=30
    Ns = [20, 40, 60, 80, 120, 160, 200, 240]
    Ks = [4, 8, 12, 16, 24, 32, 40, 48]
    lyaps = [2.2420077619167396, 2.323495653612609, 2.74203567294058, 2.5247756920437388, 2.4830638560321914,
             2.7447957421514144, 2.4560959588990383, 2.573078963473888]
    lyaps_std = [0.2685327875951919, 0.5422388502780832, 0.5161753947762726, 0.6531571071066162, 0.5709803150236344,
                 0.8677722457090725, 0.5330411502439772, 0.6027195607750713]
    sample_sizes = [10., 11., 13., 15., 12., 13., 14., 13.]
    stopping_times = [8.015174916139518, 8.00705719367385, 6.735612825930048, 7.5143567202445105, 7.533730059428195,
                      7.0849215038960285, 7.549125702530136, 7.262355583453219]
    stopping_times_std = [0.927789255020883, 1.6443878200520634, 1.4588020384742661, 1.961661639006098,
                          1.7230272540719338, 2.0461024743347402, 1.5635540678308006, 1.6354116083017813]
    plt.plot(Ns, lyaps, label='N/K=5, F=30'.format(N, K), c='r', marker='o')
    plt.fill_between(Ns, np.asarray(lyaps) - np.asarray(lyaps_std), np.asarray(lyaps) + np.asarray(lyaps_std),
                     color='r', alpha=0.2)

    F = 15 # mogoče 15
    Ns = [20,30,40,60,80,120,160,200,240]
    Ks = [4,6,8,12,16,24,32,40,48]
    lyapss = [[0.76709649,0.72129263,0.61546166,0.5546787,0.63122803,0.64272326,0.6676959,0.80434417,0.70170824,0.81034707],
              [0.5847321,0.82422771, 0.6934843, 0.71846034, 0.65907451, 0.71587208, 0.99706035,1.06116028, 0.60883584],
              [0.86219345, 0.64536867, 0.82054008, 0.85209726, 0.65620739, 0.65776409, 0.73451705, 0.6762435, 0.60432005, 0.62538997],
              [0.77002513, 0.78450007, 0.85340657, 0.65596913, 0.66221539, 0.69850916, 0.61702061, 0.5794142, 0.52708858, 0.59323799],
              [0.91596621, 0.7958483, 0.69837991, 0.73267887, 0.554849, 1.26946247, 0.68591025, 0.71636815, 0.72808401],
              [0.61823082, 0.58924489, 0.60754938, 0.75423532, 0.97416303, 0.87798677, 0.81600474, 0.63199582, 0.63434031, 1.44422757, 1.3235397, 0.86651727],
              [0.4607485, 0.82745228, 0.78204046, 0.60764921, 0.83958839, 0.69837213, 0.57394786, 0.77247326, 0.46449575, 0.90002919],
              [0.5514178, 0.76069527, 0.68875275, 0.68545523, 0.94356108, 0.64595073, 1.21570042, 0.78199143, 0.88408297, 0.66525603],
              [0.71411231, 0.67229394, 0.66200801, 0.82055478, 0.7902384, 0.87791362, 0.55662241, 0.68625275, 0.63634226]]
    lyaps = [np.average(ly) for ly in lyapss]
    lyaps_std = [np.std(ly) for ly in lyapss]
    plt.plot(Ns, lyaps, label='N/K=5, F=15'.format(N, K), c='m', marker='o')
    plt.fill_between(Ns, np.asarray(lyaps) - np.asarray(lyaps_std), np.asarray(lyaps) + np.asarray(lyaps_std),
                     color='m', alpha=0.2)



    plt.xlabel('N')
    plt.ylabel(r'$\lambda_{max}$')
    plt.title(r'ss=$10(\pm 2)$, $\delta_{start}=10^{-8}$, $\delta_{stop}=0.5$, $dt=10^{-4}$')
    plt.legend()
    plt.grid(True)
    plt.show()

# DIFFERENT N, const. N/K, F=30 STD, AVR
if True:
    fig = plt.figure()
    # delta_start=10 ** (-8), delta_stop=0.5, t_stop=100, dt=10, evolve_first=10
    # NlogN trend


    F = 30
    Ns = [20, 40, 60, 80, 120, 160, 200, 240]
    Ks = [1, 2, 3, 4, 6, 8, 10, 12]
    av =  [3.8480076244395205, 3.230675674873346, 3.726522960054512, 3.4493187036820223, 3.643302153590947, 3.504247590897174, 3.623149295376932, 3.4967721012572106]
    ma =  [37.519370540279624, 42.45605472618129, 40.19545109679837, 43.990760467693704, 47.75583522085208, 42.253835833682274, 43.36550772830306, 46.94352936170357]
    mi =  [-33.074126906931035, -29.460964971152226, -36.20539970615903, -34.870268174195786, -39.4267777913856, -36.523347127144156, -44.68875102456486, -41.53241311001964]
    sd =  [10.040982508376679, 9.300746590608044, 9.899695370419115, 9.57007980107299, 9.800899498160716, 9.63497415431447, 9.777171349157058, 9.636021021698827]
    #plt.plot(Ns, av, label='N/K=20, F=30'.format(N, K), c='b', marker='o')
    plt.plot(Ns, true_sd, label='N/K=20, F=30'.format(N, K), c='b', marker='o')

    F = 30
    Ns = [20, 40, 60, 80, 120, 160, 200, 240]
    Ks = [2, 4, 6, 8, 12, 16, 20, 24]
    av =  [3.1374591991696317, 3.344310411578425, 3.491563811284866, 3.5019556528811844, 3.557752104916015, 3.6120211815667136, 3.6066652665889034, 3.452980409062092]
    ma =  [35.408610227630916, 37.450162093083684, 40.14653317157173, 38.81246246098831, 41.128280835933325, 47.25793647323992, 45.22397371445343, 42.384348236517646]
    mi =  [-28.81374262729875, -32.463964649619555, -34.37305415282829, -33.76785579031381, -33.896642271633546, -35.270632793379875, -35.33627882477779, -31.848821924495077]
    sd =  [9.18556175245413, 9.44394527310715, 9.632614824174446, 9.628344460450512, 9.694596749649177, 9.756864819088257, 9.750693547120713, 9.575949995208951]
    #plt.plot(Ns, av, label='N/K=10, F=30'.format(N, K), c='g', marker='o')
    plt.plot(Ns, true_sd, label='N/K=10, F=30'.format(N, K), c='g', marker='o')

    F=30
    Ns= [20, 40, 60, 80, 120, 160, 200, 240]
    Ks= [4, 8, 12, 16, 24, 32, 40, 48]
    av =  [3.2882993242920078, 3.4591426958718685, 3.5891043548530366, 3.4959859291144757, 3.4998171929574124, 3.5641356055723197, 3.5217373147295135, 3.471716798297555]
    ma =  [30.41231122207867, 31.00340698475738, 32.725454693835275, 32.27927571818722, 32.7369332164155, 31.68590118195656, 32.134666322387616, 31.484931504279672]
    mi =  [-27.227929341998376, -29.43503721940618, -29.209207328962464, -29.577742138930226, -31.020118934669178, -30.293326645186955, -32.338224787673354, -29.46128706622793]
    sd =  [9.393498707595471, 9.59576546406838, 9.742522218840127, 9.62788777283586, 9.626242316578978, 9.708399038791239, 9.649340336748436, 9.578017144520075]
    #plt.plot(Ns, av, label='N/K=5, F=30'.format(N, K), c='r', marker='o')
    plt.plot(Ns, true_sd, label='N/K=5, F=30'.format(N, K), c='r', marker='o')


    F = 15 # mogoče 15
    Ns= [20, 40, 60, 80, 120, 160, 200, 240]
    Ks= [4, 8, 12, 16, 24, 32, 40, 48]
    av =  [2.3052406873488875, 2.3142078082488386, 2.339169241881887, 2.3542295843175416, 2.3334438702774016, 2.326109399380311, 2.3374311818183116, 2.362906826324151]
    ma =  [14.895616976941522, 15.234489485597638, 16.281961693209656, 16.030553768731608, 15.97624921362806, 15.286377978903369, 15.78368685857776, 16.195558736998507]
    mi =  [-12.950008225882884, -12.984457755944332, -13.648554236643099, -13.701879822458908, -13.659162422961556, -13.554055268181756, -13.858953992621446, -13.651283035390167]
    sd =  [5.401997347722224, 5.422696175930494, 5.443241344747563, 5.45502944986847, 5.435130280433665, 5.430196316651412, 5.438067697444259, 5.464862731040141]
    #plt.plot(Ns, av, label='N/K=5, F=15'.format(N, K), c='m', marker='o')
    plt.plot(Ns, true_sd, label='N/K=5, F=15'.format(N, K), c='m', marker='o')


    plt.xlabel('N')
    #plt.ylabel(r'$<X_n>$')
    plt.ylabel(r'$\sigma$')
    #plt.legend()
    plt.grid(True)
    plt.show()





# Lyapunov spectrum N=20, K=2, F=30
if True:

    # N=20 K=2 F=3 t_stop=5
    res20_5 = {'init_cond': [-17.16677811, 2.77684494, 5.32918288, 4.06720654,
                               -4.50697691, 5.28285585, 0.25784428, 5.83645619,
                               16.70014973, 4.11380002, -1.95477235, -5.53403114,
                               -2.23405133, 11.30964113, -7.40045119, 8.4124894,
                               22.06908642, 13.63659989, 16.6942645, -7.06811886],
           'renormalization time': 5,
           'max iteration number': 100,
           'delta_start': 1e-08,
           'average of log10(delta_stop)': -2.5018704470586397,
           'lyapunov exponents': [2.5769432698710695, 1.362230282227851, 0.9075709706689479, 0.5116268903909806,
                                  0.22640546829493252, 0.06170518153417367, -0.07754816282709776, -0.18947212665293567,
                                  -0.2710191849332997, -0.34454830025628347, -0.40616317398585056, -0.4647775908673257,
                                  -0.520112199419467, -0.5637457841185922, -0.619811423672139, -0.6805864739934802,
                                  -0.7312997967753143, -0.792361042257807, -0.861276597554696, -0.9786200209471201],
           'lyapunov std': [0.4059557217883181, 0.3940818659325399, 0.3890340221239833, 0.32548202311478913,
                            0.23718436597259396, 0.2568656949461229, 0.3078138881665723, 0.36430575808372123,
                            0.3793295886419886, 0.3994879926929981, 0.4120529981897099, 0.41741767186431966,
                            0.4169424290434849, 0.41402911017824967, 0.4143347842264103, 0.4018558254044243,
                            0.3992869421002746, 0.3739152648776095, 0.3566222875495374, 0.35446168992261956]}


    # N=100 K=10 F=30 t_stop=4.5
    res100 = {'init_cond': [ -2.45536445,  -5.03078802,  -4.33404545,  -1.25141839,
         2.43206433,   4.95360807,   5.33790065,   3.71648245,
         0.9822884 ,  -1.77954178,  -3.45122017,  -3.07917425,
        -0.50961663,   3.27759871,   6.79970615,   8.98705982,
         9.40849095,   8.08113685,   5.51032987,   2.65664567,
         0.48744448,  -0.44842964,  -0.04918513,   1.43830612,
         3.50973783,   5.65259791,   7.53430131,   8.92961109,
         9.67702253,   9.76191952,   9.33660169,   8.70309577,
         8.33483282,   8.74993559,  10.06368927,  11.60288508,
        12.21735306,  11.17156961,   8.66438707,   5.49594243,
         2.41030749,  -0.30597065,  -2.87634664,  -5.77636041,
        -9.1859454 , -12.5463623 , -14.75784347, -14.96657564,
       -13.2788412 , -10.68920001,  -8.18008602,  -5.94976885,
        -3.77079265,  -1.87746859,  -0.93525666,  -1.26812961,
        -2.62968625,  -4.68645208,  -7.29769699, -10.1717435 ,
       -12.42344327, -12.67389595,  -9.804031  ,  -3.84983827,
         3.82490861,  11.34801522,  17.27601908,  20.94115385,
        22.41158998,  22.19391499,  20.71898947,  18.10297359,
        14.52292676,  10.79413418,   8.33074553,   8.33165269,
        11.00298196,  15.35365375,  19.46366238,  21.32167332,
        20.02854762,  16.27486995,  11.45039454,   6.32222582,
         0.79940471,  -5.03929832, -10.10320467, -12.79609034,
       -12.18567515,  -8.42529763,  -2.40277833,   4.61851371,
        11.41960358,  17.25161363,  21.5945879 ,  23.56012798,
        22.1117202 ,  17.17309048,  10.13364291,   3.0106164 ], 'renormalization time': 4, 'max iteration number': 10, 'delta_start': 1e-08, 'average of log10(delta_stop)': -3.121418977180798, 'lyapunov exponents': [2.927852154185718, 1.662310889706783, 0.9356382159695612, 0.4752847837440613, 0.29406152567956123, 0.1728377243209468, -0.09326018654497327, -0.20099649625724464, -0.3052876300937663, -0.3803333703705705, -0.45133037905977247, -0.5063487217282251, -0.5496965745487548, -0.6006951479005375, -0.6371159823249446, -0.6690958316233971, -0.7004231515029578, -0.7354484107087198, -0.751996431785122, -0.7948648766474401, -0.8101820855770205, -0.8231679667534135, -0.8410014646696999, -0.8700707483701934, -0.8893214784798549, -0.9266174160103425, -0.9631716610216992, -0.9946154593545616, -1.0220974236013085, -1.0973050696057929], 'lyapunov std': [0.29843542930229944, 0.3514585192041027, 0.32815418023777104, 0.22926165243525348, 0.2759100704534519, 0.2968913147244615, 0.397404895229919, 0.4072677212537241, 0.40125237233097016, 0.3986754869573396, 0.407155843876843, 0.39983417745300803, 0.41241840082139963, 0.4238160921637547, 0.40831870678957144, 0.41083866143025566, 0.40095967378356057, 0.4031185745577225, 0.40857294923192694, 0.401042589923154, 0.4045889616100114, 0.3940880684766393, 0.3905601343538848, 0.3462682203707001, 0.3462835773928158, 0.3157845970433244, 0.2485119453511323, 0.26222008612619085, 0.2385001534030115, 0.2618362237060149]}


    # N=240 K=24 F=3 t_stop=4
    res240 = {'init_cond':       [1.35563085e+01, 1.31116444e+01, 1.22419789e+01, 1.10029118e+01,
                                9.46602660e+00, 7.71444609e+00, 5.84128086e+00, 3.95188204e+00,
                                2.16658191e+00, 6.18002733e-01, -5.61033048e-01, -1.25712952e+00,
                                -                 1.39647046e+00, -9.58160735e-01, 2.24101742e-02, 1.45843364e+00,
                                3.22077101e+00, 5.14866202e+00, 7.06307096e+00, 8.78606257e+00,
                                1.01669905e+01, 1.11090004e+01, 1.15840830e+01, 1.16286980e+01,
                                1.13228933e+01, 1.07640756e+01, 1.00459108e+01, 9.24636252e+00,
                                8.42332395e+00, 7.61467382e+00, 6.84057333e+00, 6.10701616e+00,
                                5.40993509e+00, 4.73886845e+00, 4.07916987e+00, 3.41257012e+00,
                                2.71722776e+00, 1.96916513e+00, 1.14648666e+00, 2.36430899e-01,
                                -                 7.56038690e-01, -1.80048091e+00, -2.83735346e+00, -3.78199609e+00,
                                -                 4.53794199e+00, -5.01736733e+00, -5.16244883e+00, -4.96012512e+00,
                                -                 4.44524949e+00, -3.69167646e+00, -2.79481140e+00, -1.85101935e+00,
                                -                 9.39100200e-01, -1.07744103e-01, 6.28679637e-01, 1.28536214e+00,
                                1.89494544e+00, 2.49242598e+00, 3.10321549e+00, 3.73921436e+00,
                                4.40313453e+00, 5.09633758e+00, 5.82385568e+00, 6.59281974e+00,
                                7.40480138e+00, 8.24574521e+00, 9.07808092e+00, 9.83866810e+00,
                                1.04443058e+01, 1.08042608e+01, 1.08370251e+01, 1.04868545e+01,
                                9.73542553e+00, 8.60578599e+00, 7.15909149e+00, 5.48764405e+00,
                                3.70854192e+00, 1.96008592e+00, 3.99031927e-01, -8.06590664e-01,
                                -                 1.49420836e+00, -1.53332460e+00, -8.55379900e-01, 5.24139819e-01,
                                2.50052691e+00, 4.89393929e+00, 7.47780754e+00, 1.00129877e+01,
                                1.22799174e+01, 1.41042291e+01, 1.53739471e+01, 1.60471358e+01,
                                1.61487048e+01, 1.57561698e+01, 1.49771840e+01, 1.39248489e+01,
                                1.26977785e+01, 1.13696934e+01, 9.98901726e+00, 8.58470978e+00,
                                7.17268562e+00, 5.75886848e+00, 4.33916608e+00, 2.90018866e+00,
                                1.42425977e+00, -1.01728666e-01, -1.67812298e+00, -3.28971716e+00,
                                -                 4.90916719e+00, -6.50267189e+00, -8.03235127e+00, -9.45257778e+00,
                                -                 1.07029728e+01, -1.17052757e+01, -1.23713733e+01, -1.26242048e+01,
                                -                 1.24247944e+01, -1.17932122e+01, -1.08130917e+01, -9.61690885e+00,
                                -                 8.35701289e+00, -7.17137369e+00, -6.15323869e+00, -5.33244063e+00,
                                -                 4.67412776e+00, -4.09738067e+00, -3.51003399e+00, -2.84788634e+00,
                                -                 2.10133344e+00, -1.31606078e+00, -5.66762717e-01, 8.36198243e-02,
                                6.20495584e-01, 1.09492992e+00, 1.61563241e+00, 2.31892232e+00,
                                3.32666258e+00, 4.70540330e+00, 6.43921487e+00, 8.42362126e+00,
                                1.04804104e+01, 1.23868038e+01, 1.39103894e+01, 1.48426022e+01,
                                1.50258251e+01, 1.43714291e+01, 1.28689103e+01, 1.05890427e+01,
                                7.68393661e+00, 4.38263850e+00, 9.75905190e-01, -2.21540247e+00,
                                -                 4.88508986e+00, -6.78634251e+00, -7.76122995e+00, -7.74765112e+00,
                                -                 6.76701490e+00, -4.90230206e+00, -2.27664515e+00, 9.60703973e-01,
                                4.63919353e+00, 8.56634238e+00, 1.25295764e+01, 1.63082392e+01,
                                1.96975985e+01, 2.25381724e+01, 2.47389224e+01, 2.62856634e+01,
                                2.72336396e+01, 2.76890724e+01, 2.77852348e+01, 2.76566019e+01,
                                2.74140617e+01, 2.71261567e+01, 2.68130529e+01, 2.64573994e+01,
                                2.60283837e+01, 2.55066485e+01, 2.48960796e+01, 2.42168475e+01,
                                2.34863387e+01, 2.27013892e+01, 2.18331510e+01, 2.08383475e+01,
                                1.96821686e+01, 1.83615663e+01, 1.69159712e+01, 1.54179552e+01,
                                1.39476656e+01, 1.25646728e+01, 1.12914444e+01, 1.01138252e+01,
                                8.99369157e+00, 7.88505839e+00, 6.74784265e+00, 5.55830891e+00,
                                4.31747358e+00, 3.05737595e+00, 1.84204551e+00, 7.58604062e-01,
                                -                 1.02814444e-01, -6.74442043e-01, -9.30385640e-01, -8.91794235e-01,
                                -                 6.18353015e-01, -1.94025093e-01, 2.85342911e-01, 7.20521368e-01,
                                1.01640843e+00, 1.09210653e+00, 8.93595183e-01, 4.04209800e-01,
                                -                 3.53514623e-01, -1.32684665e+00, -2.44798029e+00, -3.64770274e+00,
                                -                 4.86347819e+00, -6.04262506e+00, -7.14251050e+00, -8.12810263e+00,
                                -                 8.96664880e+00, -9.62144084e+00, -1.00493073e+01, -1.02054489e+01,
                                -                 1.00534594e+01, -9.57316745e+00, -8.76075921e+00, -7.62311148e+00,
                                -                 6.17308343e+00, -4.43035673e+00, -2.42716109e+00, -2.15214427e-01,
                                2.12973334e+00, 4.50835255e+00, 6.80483907e+00, 8.90037685e+00,
                                1.06890586e+01, 1.20897242e+01, 1.30494142e+01, 1.35403615e+01],
            'renormalization time': 4,
            'max iteration number': 10,
            'delta_start': 1e-08,
            'average of log10(delta_stop)': -2.1744498179152294,
            'lyapunov exponents': [3.252253860520401, 1.682321257873923, 1.1308151480683628, 0.6192399519339906, 0.3842727787181538, 0.20882672297244953, -0.04267924857449288, -0.13405463801366088, -0.27546913869577794, -0.37033802837288515, -0.4417959163482428, -0.5148585011911135, -0.5767412646950748, -0.6331465028643324, -0.7056614043119441, -0.7573298238669036, -0.7825930819438827, -0.8407665482021012, -0.9016154298695828, -0.9603527155063877],
            'lyapunov std': [0.38336608879744954, 0.34178857201274426, 0.3883498658313863, 0.33715882335067643, 0.22845262669024144, 0.2556108968763591, 0.29571826790155936, 0.31557807547415223, 0.33862023724612905, 0.3414445541076596, 0.31799912470275454, 0.3178455862546868, 0.33790550310400363, 0.35153238454849267, 0.32544181353630036, 0.33250578263189123, 0.33836643132904143, 0.32080482074400357, 0.2772583119527595, 0.27598012627992136]}

    # N=40 K=4 F=3 t_stop=4
    res40 = {'init_cond': [  0.48318681,   2.95424609,   6.52282199,   7.20527187,
        -3.96403755,  -5.47662056,   1.92791392,   4.32702182,
         7.82995316,   8.69806238,   3.92827945,   2.92003026,
         0.54267392,  -5.21726865,  -5.19664442,  -2.08799543,
         1.20924886,   3.1653867 ,   1.75996026,  -8.86433605,
       -16.77190089, -14.60236073,  -9.11398247, -14.37423936,
       -17.31203336,  -7.19224751,   5.85510574,  11.08874374,
         8.2646984 ,  10.94253367,  22.50197604,  28.77939118,
        21.85693002,  14.40939591,   7.82256211,   1.69014723,
         1.63308663,   6.82762937,   6.55133002,   0.94571574], 'renormalization time': 4, 'max iteration number': 10, 'delta_start': 1e-08, 'average of log10(delta_stop)': -2.893540399917108, 'lyapunov exponents': [2.781434654511335, 1.6451243456552522, 0.8738794623605861, 0.4127826269763019, 0.10960225774858412, -0.034636386016095914, -0.21880401381310088, -0.37973261534203817, -0.45025655620948524, -0.5573203972328434, -0.6035890063990406, -0.7074748766959874, -0.7227860916531667, -0.7779935454296956, -0.8186635510564024, -0.8574896878966384, -0.8808796303155182, -0.9007363818554908, -0.9188951245006065, -0.9437811963329539, -0.9629755207517858, -0.9750215325616701, -0.9891188788179737, -1.008600934718906, -1.029980341109714, -1.0554282917572377, -1.0640405173992893, -1.09439716573097, -1.1322403166933657, -1.200070814194891], 'lyapunov std': [0.32780640993438326, 0.4259465922175007, 0.2991277738486239, 0.228681225964483, 0.2028229192004179, 0.20551313060050658, 0.12719814380479622, 0.13056010085594374, 0.12570997862037922, 0.14013121050279845, 0.12199251637892788, 0.12114971534710291, 0.12376022362978752, 0.11662051760552893, 0.12663274415712591, 0.13165300765266522, 0.1270953827060819, 0.1246488650018515, 0.12256424218316127, 0.13484886600208956, 0.1365186769793207, 0.14258419863271163, 0.13757516559322344, 0.15504563822425746, 0.16122162319243719, 0.16071943589245707, 0.15763244829038162, 0.16482726820785323, 0.16854483218832864, 0.19539799682374623]}


    # N=20 K=2 F=3 t_stop=4
    res20_4 = {'init_cond': [-17.16677811, 2.77684494, 5.32918288, 4.06720654,
                          -4.50697691, 5.28285585, 0.25784428, 5.83645619,
                          16.70014973, 4.11380002, -1.95477235, -5.53403114,
                          -2.23405133, 11.30964113, -7.40045119, 8.4124894 ,
                          22.06908642, 13.63659989, 16.6942645 , -7.06811886], 'renormalization time': 4, 'max iteration number': 100, 'delta_start': 1e-08, 'average of log10(delta_stop)': -3.7310480325008886, 'lyapunov exponents': [2.6178394922826973, 1.27472122414315, 0.7607420508879335, 0.35744280535963574, 0.05833119712670215, -0.164162415401803, -0.32955435310527065, -0.474257467369752, -0.6173651576571889, -0.7281083835126851, -0.8116212918890069, -0.9013473699780823, -0.9849835069601338, -1.049042352770446, -1.112554059330677, -1.1821716227353218, -1.2579996496956032, -1.3276846821887507, -1.4327494897282356, -1.5933243911501387], 'lyapunov std': [0.49692294364471146, 0.3901768117536984, 0.2977174717983585, 0.27540023288917587, 0.2596391849725437, 0.21667262166439658, 0.22037549003547777, 0.23392286647970845, 0.23432107293160043, 0.24436130574843404, 0.25966807191367436, 0.275198759530675, 0.28314063729401495, 0.2868137757279443, 0.29452918513515974, 0.29025793496180036, 0.2943707255395479, 0.2992797934048661, 0.30993034841361594, 0.36225143551336797]}


    fig=plt.figure(figsize=(10, 5)).gca()

    plt.plot([i for i in range(20)], res20_5['lyapunov exponents'], linestyle='--', c='k')

    plt.plot([i for i in range(20)], res20_4['lyapunov exponents'], c='k')

    plt.plot([i for i in range(20)], res40['lyapunov exponents'][:20], c='r')

    plt.plot([i for i in range(20)], res100['lyapunov exponents'][:20], c='g')

    plt.plot([i for i in range(20)], res240['lyapunov exponents'][:20], c='b')

    #plt.plot([i for i in range(20)], res_['lyapunov exponents'], c='b')
    #plt.errorbar([i for i in range(20)], res_['lyapunov exponents'], yerr=res_['lyapunov std'], capsize=10, c='b', label=r'N=20, K=2, F=30, $\delta_{start}=10^{-8}$,' + '\n' + r'$\delta_{stop,avr}\approx10^{-3.73}$ $(t_{stop}=4)$, ss=100, $d_L\approx13.06$')
    #plt.title(r'Sample size = 100, 10, Evolve first (time) = $10^4$, 100')

    plt.xlabel('i')
    plt.ylabel(r'$\lambda_{i}$')
    #plt.legend(loc=1, fontsize=10)
    # plt.title('(First) 20 Lyap. exp.', fontsize=13)
    plt.grid(True)
    fig.xaxis.set_major_locator(MaxNLocator(integer=True))
    plt.show()

    fig = plt.figure(figsize=(10, 5)).gca()

    plt.plot([i for i in range(20)], res20_5['lyapunov std'], linestyle='--', c='k', label=r'N=20, K=2, F=30, $\delta_{start}=10^{-8}$,' + '\n' + r'$\delta_{stop,avr}\approx10^{-2.5}$ $(t_{stop}=5)$, ss=100, $d_L\approx17.98$')

    plt.plot([i for i in range(20)], res20_4['lyapunov std'], c='k', label=r'N=20, K=2, F=30, $\delta_{start}=10^{-8}$,' + '\n' + r'$\delta_{stop,avr}\approx10^{-3.73}$ $(t_{stop}=4)$, ss=100, $d_L\approx13.05$')

    plt.plot([i for i in range(20)], res40['lyapunov std'][:20], c='r', label=r'N=40, K=4 F=30, $\delta_{start}=10^{-8}$,' + '\n' + r'$\delta_{stop,avr}\approx10^{-2.89}$ $(t_{stop}=4)$, ss=10, $d_L\approx15.64$')

    plt.plot([i for i in range(20)], res100['lyapunov std'][:20], c='g', label=r'N=100, K=10, F=30, $\delta_{start}=10^{-8}$,' + '\n' + r'$\delta_{stop,avr}\approx10^{-3.12}$ $(t_{stop}=4)$, ss=10, $d_L\approx 18.85$')

    plt.plot([i for i in range(20)], res240['lyapunov std'][:20], c='b', label=r'N=240, K=24, F=30, $\delta_{start}=10^{-8}$,' + '\n' + r'$\delta_{stop,avr}\approx10^{-2.17}$ $(t_{stop}=4)$, ss=10, $d_L\approx19.31$')

    plt.xlabel('i')
    plt.ylabel(r'std')
    plt.legend(bbox_to_anchor=(1,1), loc="upper top", fontsize=9)
    plt.grid(True)
    fig.xaxis.set_major_locator(MaxNLocator(integer=True))
    plt.show()

    def calculate_lyapunov_dim(lyap_arr):

        N = len(lyap_arr)

        sum = 0
        for i in range(N):
            s = sum + lyap_arr[i]
            print(s)
            if s >= 0:
                sum = s
            else:
                break

        print(i)
        d_lyap = i + 1/np.abs(lyap_arr[i]) * sum

        return d_lyap


    print(calculate_lyapunov_dim(res20_4['lyapunov exponents']))





############################################################################################
############################################################################################
############################################################################################

################## Parameter Search Results ################################################

# STLSQ Poly3 results
if False:
    plt.figure(figsize=(10, 5))


    estimator_path = ""

    with open(estimator_path, 'rb') as inp:
        res = pickle.load(inp) # Lorenz_model_3_evaluated

        #print(sur_L05_2_search_results)

        results = res['cv_results']
        print(res['best_params'])

        n_splits = res['n_splits']
        x_splits = np.arange(1, res['n_splits'] + 1)

        num_of_combs = len(results['param_optimizer__alpha'])

        SCORES = []
        for i in range(num_of_combs):
            scores = []
            for j in range(n_splits):
                scores.append(results['split{}_test_score'.format(j)][i])

            scores = np.exp(np.asarray(scores)-1)
            SCORES.append(scores)

        SCORES_max = [[max(i), np.argmax(i)] for i in SCORES]

        for i in range(num_of_combs):
            plt.plot(x_splits, SCORES[i],
                     label=r'$\alpha={}, \lambda={}$, (sc={}, it={}) '.format(results['param_optimizer__alpha'][i],
                                                                           results['param_optimizer__threshold'][i],
                                                                           round(SCORES_max[i][0], 4),
                                                                           SCORES_max[i][1]))

        plt.title(r'STLSQ Poly3, $\mu={}$, dt={}, cs={}, mi={}, df=SFD'.format(res['noise'],
                                                                               res['dt'],
                                                                               res['chunk_size'],
                                                                               res['max_iter'],
                                                                               ))
        plt.ylabel('score')
        plt.xlabel('split num')
        plt.legend()
        plt.grid(True)
        plt.show()

# STLSQ results
if False:
    plt.figure(figsize=(10, 5))


    #estimator_path = "data/L05_2_{'N': 20, 'K': 2, 'F': 30}/L05_2_SINDy_STLSQ_search_{'N': 20, 'K': 2, 'F': 30}_[0, 0.005, 545, 10, 30, 'SFD']_e126f2ff7b3c5fdcb74345958d6fb664861e1dd9.pkl"
    #estimator_path = "data/L05_2_{'N': 20, 'K': 2, 'F': 30}/L05_2_SINDy_STLSQ_search_{'N': 20, 'K': 2, 'F': 30}_[0.1, 0.005, 545, 10, 30, 'SFD']_1290bb4927f6f0a23921cf312e6555320cdb19a8.pkl"
    #estimator_path = "data/L05_2_{'N': 20, 'K': 2, 'F': 30}/L05_2_SINDy_STLSQ_search_{'N': 20, 'K': 2, 'F': 30}_[0.3, 0.005, 545, 10, 30, 'SFD']_c0e581067a42c467bec254e3798dfa0c65aec395.pkl"
    #estimator_path = "data/L05_2_{'N': 20, 'K': 2, 'F': 30}/L05_2_SINDy_STLSQ_search_{'N': 20, 'K': 2, 'F': 30}_[0.5, 0.005, 545, 10, 30, 'SFD']_8205a1d49dd133ffff4c2a94f1d98f90102545ab.pkl"
    #estimator_path = "data/L05_2_{'N': 20, 'K': 2, 'F': 30}/L05_2_SINDy_STLSQ_search_{'N': 20, 'K': 2, 'F': 30}_[1, 0.005, 545, 10, 30, 'SFD']_090c4f07f73645bddd0112e7e163c1c19c968a95.pkl"
    #estimator_path = "data/L05_2_{'N': 20, 'K': 2, 'F': 30}/L05_2_SINDy_STLSQ_search_{'N': 20, 'K': 2, 'F': 30}_[0, 0.01, 545, 10, 20, 'SFD']_36dd427706a967ea3d5846e55f9c21d81c940067.pkl"
    estimator_path = "data/L05_2_{'N': 20, 'K': 2, 'F': 30}/L05_2_SINDy_STLSQ_search_{'N': 20, 'K': 2, 'F': 30}_[1, 0.01, 544, 8, 20, 'SFD']_8dac0ae2a2f7aff9c0def393328b6408cff92151.pkl"

    with open(estimator_path, 'rb') as inp:
        res = pickle.load(inp) # Lorenz_model_3_evaluated

        #print(sur_L05_2_search_results)

        results = res['cv_results']
        print(res['best_params'])

        n_splits = res['n_splits']
        x_splits = np.arange(1, res['n_splits'] + 1)

        num_of_combs = len(results['param_optimizer__alpha'])

        SCORES = []
        for i in range(num_of_combs):
            scores = []
            for j in range(n_splits):
                scores.append(results['split{}_test_score'.format(j)][i])

            scores = np.exp(np.asarray(scores)-1)
            SCORES.append(scores)

        SCORES_max = [[max(i), np.argmax(i)] for i in SCORES]

        for i in range(num_of_combs):
            plt.plot(x_splits, SCORES[i],
                     label=r'$\alpha={}, \lambda={}$, (sc={}, it={}) '.format(results['param_optimizer__alpha'][i],
                                                                           results['param_optimizer__threshold'][i],
                                                                           round(SCORES_max[i][0], 4),
                                                                           SCORES_max[i][1]))

        plt.title(r'STLSQ, $\mu={}$, dt={}, cs={}, mi={}, df=SFD'.format(res['noise'],
                                                                         res['dt'],
                                                                         res['chunk_size'],
                                                                         res['max_iter'],
                                                                         ))
        plt.ylabel('score')
        plt.xlabel('split num')
        plt.legend()
        plt.grid(True)
        plt.show()

# ConsSR3 results
if False:
    plt.figure(figsize=(10, 5))


    #estimator_path = "data/L05_2_{'N': 20, 'K': 2, 'F': 30}/L05_2_SINDy_ConsSR3_search_{'N': 20, 'K': 2, 'F': 30}_[0, 0.005, 545, 10, 10, 'SFD']_e126f2ff7b3c5fdcb74345958d6fb664861e1dd9.pkl"
    #estimator_path = "data/L05_2_{'N': 20, 'K': 2, 'F': 30}/L05_2_SINDy_ConsSR3_search_{'N': 20, 'K': 2, 'F': 30}_[0.5, 0.005, 545, 10, 10, 'SFD']_8205a1d49dd133ffff4c2a94f1d98f90102545ab.pkl"
    #estimator_path = "data/L05_2_{'N': 20, 'K': 2, 'F': 30}/L05_2_SINDy_ConsSR3_search_{'N': 20, 'K': 2, 'F': 30}_[1, 0.005, 545, 10, 20, 'SFD']_090c4f07f73645bddd0112e7e163c1c19c968a95.pkl"
    #estimator_path = "data/L05_2_{'N': 20, 'K': 2, 'F': 30}/L05_2_SINDy_ConsSR3_search_{'N': 20, 'K': 2, 'F': 30}_[0, 0.01, 545, 10, 20, 'SFD']_36dd427706a967ea3d5846e55f9c21d81c940067.pkl"
    estimator_path = "data/L05_2_{'N': 20, 'K': 2, 'F': 30}/L05_2_SINDy_ConsSR3_search_{'N': 20, 'K': 2, 'F': 30}_[1, 0.01, 544, 8, 20, 'SFD']_8dac0ae2a2f7aff9c0def393328b6408cff92151.pkl"

    with open(estimator_path, 'rb') as inp:
        res = pickle.load(inp) # Lorenz_model_3_evaluated

        print(res)

        results = res['cv_results']
        print(res['best_params'])

        n_splits = res['n_splits']
        x_splits = np.arange(1, res['n_splits'] + 1)

        num_of_combs = len(results['param_optimizer__nu'])

        SCORES = []
        for i in range(num_of_combs):
            scores = []
            for j in range(n_splits):
                scores.append(results['split{}_test_score'.format(j)][i])

            scores = np.exp(np.asarray(scores)-1)
            SCORES.append(scores)

        SCORES_max = [[max(i), np.argmax(i)] for i in SCORES]

        for i in range(num_of_combs):
            plt.plot(x_splits, SCORES[i],
                         label=r'$\nu={}, \lambda={}$, (sc={}, it={}) '.format(results['param_optimizer__nu'][i],
                                                                 results['param_optimizer__threshold'][i], round(SCORES_max[i][0],4), SCORES_max[i][1]+1))


        plt.title(r'ConsSR3, $\mu={}$, dt={}, cs={}, mi={}, df=SFD'.format(res['noise'],
                                                                           res['dt'],
                                                                           res['chunk_size'],
                                                                           res['max_iter'],
                                                                           ))
        plt.ylabel('score')
        plt.xlabel('split num')
        plt.legend()
        plt.grid(True)
        plt.show()

# TrapSR3 results
if False:
    plt.figure(figsize=(10, 5))

    # results = {'param_optimizer__threshold' : [0.001, 0.01, 0.001, 0.01, 0.001, 0.01, 0.001, 0.01],
    #            'param_optimizer__gamma': [-1, -1, -1, -1, 0, 0, 0, 0],
    #            'param_optimizer__eta': [1, 1, 10, 10, 10, 10, 1, 1],
    #            'split0_test_score' : [-4.848, -4.834, -4.493, -4.771, -6.444, -6.438, -5.121, -5.125],
    #            'split1_test_score' : [-2.031, -2.031, -2.031, -2.031, -2.031, -2.031, -2.031, -2.031],
    #            'split2_test_score' : [-0.454, -0.454, -0.454, -0.454, -0.454, -0.454, -0.454, -0.454],
    #            'split3_test_score' : [0.177, 0.177, 0.177, 0.177, 0.177, 0.177, 0.177, 0.177],
    #            'split4_test_score' : [0.215, 0.215, 0.215, 0.215, 0.215, 0.215, 0.215, 0.215],
    #            'split5_test_score' : [0.572, 0.572, 0.572, 0.572, 0.572, 0.572, 0.572, 0.572],
    #            'split6_test_score' : [0.451, 0.451, 0.451, 0.451, 0.451, 0.451, 0.451, 0.451],
    #            'split7_test_score' : [0.573, 0.573, 0.573, 0.573, 0.573, 0.573, 0.573, 0.573],
    #            'split8_test_score' : [0.615, 0.615, 0.615, 0.615, 0.615, 0.615, 0.615, 0.615],
    #            'split9_test_score' : [0.605, 0.605, 0.605, 0.605, 0.605, 0.605, 0.605, 0.605],
    #            }
    # res = {'results' : results,
    #                            'noise' : 1,
    #                            'dt' : '0.005',
    #                            'chunk_size' : 545,
    #                            'max_iter' : 20,
    #                            'n_splits': 10,
    #                             }

    # results = {'param_optimizer__threshold': [0.001, 0.01, 0.001, 0.01, 0.001, 0.01, 0.001, 0.01],
    #            'param_optimizer__gamma': [-1, -1, -1, -1, 0, 0, 0, 0],
    #            'param_optimizer__eta': [1, 1, 10, 10, 1, 1, 10, 10],
    #            'split0_test_score': [-10.608, -10.437, -0.003, -0.001, -15.697, -15.695, -0.008, -0.004],
    #            'split1_test_score': [-0.575, -0.575, -0.643, -0.643, -5.506, -5.506, -5.498, -5.498],
    #            'split2_test_score': [-0.441, -0.441, -0.441, -0.441, -0.441, -0.441, -0.441, -0.441],
    #            'split3_test_score': [0.322, 0.322,0.322 ,0.322, 0.322, 0.322, 0.322, 0.322],
    #            'split4_test_score': [0.363, 0.363,0.363 ,0.363, 0.363, 0.363, 0.363, 0.363],
    #            'split5_test_score': [0.787, 0.787,0.787 ,0.787, 0.787, 0.787, 0.787, 0.787],
    #            'split6_test_score': [0.671, 0.671,0.671 ,0.671, 0.671, 0.671, 0.671, 0.671],
    #            'split7_test_score': [0.793, 0.793,0.793 ,0.793, 0.793, 0.793, 0.793, 0.793],
    #            'split8_test_score': [0.844, 0.844,0.844 ,0.844, 0.844, 0.844, 0.844, 0.844],
    #            'split9_test_score': [0.841, 0.841,0.841 ,0.841, 0.841, 0.841, 0.841, 0.841],
    #            }
    # res = {'results': results,
    #                            'noise': 0.5,
    #                            'dt': '0.005',
    #                            'chunk_size': 545,
    #                            'max_iter': 20,
    #                            'n_splits': 10,
    #                            }

    # results = {'param_optimizer__threshold': [0.01, 0.1],
    #            'param_optimizer__gamma': [-0.01, -0.01],
    #            'param_optimizer__eta': [1, 1],
    #            'split0_test_score': [-0.001, -7.191],
    #            'split1_test_score': [0.284, 0.318],
    #            'split2_test_score': [0.594, 0.594],
    #            'split3_test_score': [0.985, 0.985],
    #            'split4_test_score': [0.987, 0.987],
    #            'split5_test_score': [0.997, 0.997],
    #            'split6_test_score': [0.998, 0.998],
    #            'split7_test_score': [0.999, 0.999],
    #            'split8_test_score': [0.999, 0.999],
    #            'split9_test_score': [0.999, 0.999],
    #            }
    # res = {'results': results,
    #                            'noise': 0,
    #                            'dt': '0.01',
    #                            'chunk_size': 545,
    #                            'max_iter': 20,
    #                            'n_splits': 10,
    #                            }

    results = {'param_optimizer__threshold': [0.01, 0.1, 0.01, 0.1, 0.001, 0.001, 0.001, 0.001],
               'param_optimizer__gamma': [-0.01, -0.01, -0.01, -0.01, -0.01, -0.01, -0.01, -0.01],
               'param_optimizer__eta': [1, 1, 10, 10, 1, 1, 10, 10],
               'split0_test_score': [-0.206, -0.206, -0.108, -0.197, -0.104, -0.104, -0.354, -0.315],
               'split1_test_score': [0.558, 0.558, 0.558, 0.558, 0.558, 0.558, 0.558, 0.558],
               'split2_test_score': [0.612, 0.612, 0.612, 0.612, 0.612, 0.612, 0.612, 0.612],
               'split3_test_score': [0.838, 0.838, 0.838, 0.838, 0.838, 0.838, 0.838, 0.838],
               'split4_test_score': [0.853, 0.853, 0.853, 0.853, 0.853, 0.853, 0.853, 0.853],
               'split5_test_score': [0.855, 0.855, 0.855, 0.855, 0.855, 0.855, 0.855, 0.855],
               'split6_test_score': [0.858, 0.858, 0.858, 0.858, 0.858, 0.858, 0.858, 0.858],
               'split7_test_score': [0.869, 0.869, 0.869, 0.869, 0.869, 0.869, 0.869, 0.869],
               }
    res = {'results': results,
           'noise': 1,
           'dt': 0.01,
           'chunk_size': 544,
           'max_iter': 20,
           'n_splits': 8,
          }




    n_splits = res['n_splits']
    x_splits = np.arange(1, res['n_splits'] + 1)

    num_of_combs = len(results['param_optimizer__threshold'])

    SCORES = []
    for i in range(num_of_combs):
        scores = []
        for j in range(n_splits):
            scores.append(results['split{}_test_score'.format(j)][i])

        scores = np.exp(np.asarray(scores)-1)
        SCORES.append(scores)

    SCORES_max = [[max(i), np.argmax(i)] for i in SCORES]

    for i in range(num_of_combs):
        plt.plot(x_splits, SCORES[i],
                     label=r'$\gamma={}, \eta={}, \lambda={}$, (sc={}, it={}) '.format(results['param_optimizer__gamma'][i],results['param_optimizer__eta'][i],
                                                             results['param_optimizer__threshold'][i], round(SCORES_max[i][0],4), SCORES_max[i][1]+1))


    plt.title(r'TrapSR3, $\mu={}$, dt={}, cs={}, mi={}, df=SFD'.format(res['noise'],
                                                                    res['dt'],
                                                                    res['chunk_size'],
                                                                    res['max_iter'],
                                                                    ))
    plt.ylabel('score')
    plt.xlabel('split num')
    plt.legend()
    plt.grid(True)
    plt.show()

###################### Max Iter Results #####################################################

# STLSQ results
if False:
    plt.figure(figsize=(10, 5))


    #estimator_path = "data/L05_2_{'N': 20, 'K': 2, 'F': 30}/L05_2_SINDy_STLSQ_search_maxiter_{'N': 20, 'K': 2, 'F': 30}_[0.0, 0.005, 545, 10, maxiter, 'SFD']_e126f2ff7b3c5fdcb74345958d6fb664861e1dd9.pkl"
    #estimator_path = "data/L05_2_{'N': 20, 'K': 2, 'F': 30}/L05_2_SINDy_STLSQ_search_maxiter_{'N': 20, 'K': 2, 'F': 30}_[0.5, 0.005, 545, 10, maxiter, 'SFD']_8205a1d49dd133ffff4c2a94f1d98f90102545ab.pkl"
    #estimator_path = "data/L05_2_{'N': 20, 'K': 2, 'F': 30}/L05_2_SINDy_STLSQ_search_maxiter_{'N': 20, 'K': 2, 'F': 30}_[1, 0.005, 545, 10, 'maxiter', 'SFD']_090c4f07f73645bddd0112e7e163c1c19c968a95.pkl"

    with open(estimator_path, 'rb') as inp:
        res = pickle.load(inp) # Lorenz_model_3_evaluated

        #print(sur_L05_2_search_results)

        results = res['cv_results']
        print(res['best_params'])

        n_splits = res['n_splits']
        x_splits = np.arange(1, res['n_splits'] + 1)

        num_of_combs = len(results['param_optimizer__alpha'])

        SCORES = []
        for i in range(num_of_combs):
            scores = []
            for j in range(n_splits):
                scores.append(results['split{}_test_score'.format(j)][i])

            scores = np.exp(np.asarray(scores)-1)
            SCORES.append(scores)

        SCORES_max = [[max(i), np.argmax(i)] for i in SCORES]

        for i in range(num_of_combs):
            plt.plot(x_splits, SCORES[i],
                     label=r'max_iter={}, (sc={}, it={}) '.format(results['param_optimizer__max_iter'][i],
                                                                           round(SCORES_max[i][0], 4),
                                                                           SCORES_max[i][1]))

        plt.title(r'STLSQ, $\mu={}$, dt={}, cs={}, $\alpha$={}, $\lambda$={}, df=SFD'.format(res['noise'],
                                                                                             res['dt'],
                                                                                             res['chunk_size'],
                                                                                             res['best_params']['optimizer__alpha'],
                                                                                             res['best_params']['optimizer__threshold']
                                                                                             ))
        plt.ylabel('score')
        plt.xlabel('split num')
        plt.legend()
        plt.grid(True)
        plt.show()

# ConsSR3 results
if False:
    plt.figure(figsize=(10, 5))

    estimator_path = "data/L05_2_{'N': 20, 'K': 2, 'F': 30}/L05_2_SINDy_ConsSR3_search_maxiter_{'N': 20, 'K': 2, 'F': 30}_[1, 0.005, 545, 10, 'maxiter', 'SFD']_090c4f07f73645bddd0112e7e163c1c19c968a95.pkl"

    with open(estimator_path, 'rb') as inp:
        res = pickle.load(inp) # Lorenz_model_3_evaluated

        print(res)

        results = res['cv_results']
        print(res['best_params'])

        n_splits = res['n_splits']
        x_splits = np.arange(1, res['n_splits'] + 1)

        num_of_combs = len(results['param_optimizer__nu'])

        SCORES = []
        for i in range(num_of_combs):
            scores = []
            for j in range(n_splits):
                scores.append(results['split{}_test_score'.format(j)][i])

            scores = np.exp(np.asarray(scores)-1)
            SCORES.append(scores)

        SCORES_max = [[max(i), np.argmax(i)] for i in SCORES]

        for i in range(num_of_combs):
            plt.plot(x_splits, SCORES[i],
                     label=r'max_iter={}, (sc={}, it={}) '.format(results['param_optimizer__max_iter'][i],
                                                                  round(SCORES_max[i][0], 4),
                                                                  SCORES_max[i][1]))

        plt.title(r'ConsSR3, $\mu={}$, dt={}, cs={}, $\nu$={}, $\lambda$={}, df=SFD'.format(res['noise'],
                                                                                            res['dt'],
                                                                                            res['chunk_size'],
                                                                                            res['best_params']['optimizer__nu'],
                                                                                            res['best_params']['optimizer__threshold']
                                                                                            ))

        plt.ylabel('score')
        plt.xlabel('split num')
        plt.legend()
        plt.grid(True)
        plt.show()

# TrapSR3 results
if False:
    plt.figure(figsize=(10, 5))

    results = {'param_optimizer__threshold' : [0.01],
               'param_optimizer__gamma': [-1],
               'param_optimizer__eta': [1],
               'param_optimizer__max_iter' : [1,3,5,7,10],
               'split0_test_score' : [-4506, -4.378, -4.427, -4.309, -6.307],
               'split1_test_score' : [-2.031, -2.031, -2.031, -2.031, -2.031],
               'split2_test_score' : [-0.454, -0.454, -0.454, -0.454, -0.454],
               'split3_test_score' : [0.177, 0.177, 0.177, 0.177, 0.177],
               'split4_test_score' : [0.215, 0.215, 0.215, 0.215, 0.215],
               'split5_test_score' : [0.572, 0.572, 0.572, 0.572, 0.572],
               'split6_test_score' : [0.451, 0.451, 0.451, 0.451, 0.451],
               'split7_test_score' : [0.573, 0.573, 0.573, 0.573, 0.573],
               'split8_test_score' : [0.615, 0.615, 0.615, 0.615, 0.615],
               'split9_test_score' : [0.605, 0.605, 0.605, 0.605, 0.605],
               }
    res = {'results' : results,
                               'noise' : 1,
                               'dt' : '0.005',
                               'chunk_size' : 545,
                               'n_splits': 10,
           }




    n_splits = res['n_splits']
    x_splits = np.arange(1, res['n_splits'] + 1)

    num_of_combs = len(results['param_optimizer__max_iter'])

    SCORES = []
    for i in range(num_of_combs):
        scores = []
        for j in range(n_splits):
            scores.append(results['split{}_test_score'.format(j)][i])

        scores = np.exp(np.asarray(scores)-1)
        SCORES.append(scores)

    SCORES_max = [[max(i), np.argmax(i)] for i in SCORES]

    for i in range(num_of_combs):
        plt.plot(x_splits, SCORES[i],
                     label=r'mi={},, (sc={}, it={}) '.format(results['param_optimizer__max_iter'][i], round(SCORES_max[i][0],4), SCORES_max[i][1]+1))


    plt.title(r'Trap, $\mu={}$, $\gamma={}, \eta={}, \lambda={}$, dt={}, cs={}, df=SFD'.format(res['noise'],
                                                                                               results['param_optimizer__gamma'][0], results['param_optimizer__eta'][0],
                                                                                               results['param_optimizer__threshold'][0],
                                                                                               res['dt'],
                                                                                               res['chunk_size'],
                                                                                               ))
    plt.ylabel('score')
    plt.xlabel('split num')
    plt.legend()
    plt.grid(True)
    plt.show()

########################## Plotting Trajectories ############################################

# STLSQ trajs and lissajou
if False:

    #estimator_path = "data/L05_2_{'N': 20, 'K': 2, 'F': 30}/Trained_models/L05_2_SINDy_STLSQ_search_{'N': 20, 'K': 2, 'F': 30}_predefined_split_{'mu': 0, 'dt': 0.01, 'test_size': 300, 'all_point': 100000, 'max_it': 20, 'df': 'SFD'}_e709036311712e58017761816b57d6f0e30dd64d.pkl"
    #estimator_path = "data/L05_2_{'N': 20, 'K': 2, 'F': 30}/Trained_models/L05_2_SINDy_STLSQ_search_{'N': 20, 'K': 2, 'F': 30}_predefined_split_{'mu': 0.5, 'dt': 0.01, 'test_size': 300, 'all_point': 100000, 'max_it': 20, 'df': 'SFD'}_4bcc1441926a3ac9912f307def44467b1cfabd5a.pkl"
    #estimator_path = "data/L05_2_{'N': 20, 'K': 2, 'F': 30}/Trained_models/L05_2_SINDy_STLSQ_search_{'N': 20, 'K': 2, 'F': 30}_predefined_split_{'mu': 1, 'dt': 0.01, 'test_size': 300, 'all_point': 100000, 'max_it': 20, 'df': 'SFD'}_98ad93be032224faa781e0e94a530041170f4d55.pkl"

    #estimator_path = "data/L05_2_{'N': 20, 'K': 2, 'F': 30}/L05_2_SINDy_STLSQ_search_{'N': 20, 'K': 2, 'F': 30}_predefined_split_{'mu': 0, 'dt': 0.01, 'test_size': 300, 'all_point': 4900, 'max_it': 20, 'df': 'SFD'}_5120447993576d598cbd96ecf00f8b3e226a1b3f.pkl"
    #estimator_path = "data/L05_2_{'N': 20, 'K': 2, 'F': 30}/L05_2_SINDy_STLSQ_search_{'N': 20, 'K': 2, 'F': 30}_predefined_split_{'mu': 0.5, 'dt': 0.01, 'test_size': 300, 'all_point': 4900, 'max_it': 20, 'df': 'SFD'}_4144a6adf539e455c9bc20076ad3e79e276b4da2.pkl"
    #estimator_path = "data/L05_2_{'N': 20, 'K': 2, 'F': 30}/L05_2_SINDy_STLSQ_search_{'N': 20, 'K': 2, 'F': 30}_predefined_split_{'mu': 1, 'dt': 0.01, 'test_size': 300, 'all_point': 4900, 'max_it': 20, 'df': 'SFD'}_96c15d7ae8248de632be7ff2fdbc17721667edaf.pkl"

    estimator_path = "data/L05_2_{'N': 20, 'K': 2, 'F': 30}/Trained_models_cov_off_diag_0.5/L05_2_SINDy_STLSQ_search_{'N': 20, 'K': 2, 'F': 30}_predefined_split_{'mu': 0.5, 'dt': 0.01, 'test_size': 300, 'all_point': 4500, 'max_it': 20, 'df': 'SFD'}_cc28334e92fbc2020d6adc73a4d174cd5c0df927.pkl"
    estimator_path = "data/L05_2_{'N': 20, 'K': 2, 'F': 30}/Trained_models_cov_off_diag_0.5/L05_2_SINDy_STLSQ_search_{'N': 20, 'K': 2, 'F': 30}_predefined_split_{'mu': 1, 'dt': 0.01, 'test_size': 300, 'all_point': 4500, 'max_it': 20, 'df': 'SFD'}_1cb25185082cafeef884ef87bb8424c0ab133e15.pkl"

    with open(estimator_path, 'rb') as inp:
        res = pickle.load(inp) # Lorenz_model_3_evaluated
        model = res['best_est']
        for key, val in res.items():
            if key != 'cv_results' and key != 'x':
                print(key, ' : ', val)
        print('ODE:')
        model.print()
        #print(model.coefficients())

    num_of_test_points = res['test_size']
    num_of_train_points = len(res['x']) - num_of_test_points

    # make predictions
    n_targets = pars['N']
    dt = res['dt']
    Xi = model.coefficients().T

    t_test = np.arange(0, num_of_test_points) * dt
    t_train = np.arange(0, num_of_train_points) * dt

    x_test = res['x'][-num_of_test_points:]
    xdot_test = model.differentiate(x_test, t=t_test)
    x_train = res['x'][:num_of_train_points]

    x_og_test = res['x_og'][-num_of_test_points:]
    xdot_og_test = model.differentiate(x_og_test, t=t_test)
    x_og_train = res['x_og'][:num_of_train_points]

    x_test_pred = model.simulate(x_test[0, :], t_test, integrator_kws=integrator_keywords)
    xdot_test_pred = model.predict(x_test)
    x_train_pred = model.simulate(x_train[0, :], t_train, integrator_kws=integrator_keywords)

    E_pred = np.linalg.norm(x_test - x_test_pred) / np.linalg.norm(x_test)

    # plotting and analysis
    title = 'STLSQ, Model predictions of first 3 components (first {} points of test set)\n'.format(num_of_test_points) + \
            r'$\alpha={}$, $\lambda={}$, $\mu={}|0.5$, dt={}, tr_s={}, te_s={}, mi={}, df=SFD, sc={}'.format(res['best_params']['optimizer__alpha'],
                                                                                                         res['best_params']['optimizer__threshold'],
                                                                                                         res['noise'],
                                                                                                         res['dt'],
                                                                                                         res['num_of_points'] - res['test_size'],
                                                                                                         res['test_size'],
                                                                                                         res['max_iter'],
                                                                                                         round(res['best_score'],4))
    make_fits(5, t_test, xdot_test, xdot_og_test, xdot_test_pred, x_test, x_og_test, x_test_pred, title)
    title = r'STLSQ, Model vs. original Lissajou plots of first 4 components ($1^{st} 5\cdot 10^4$ points of training set)' + '\n' + \
            r'$\alpha={}$, $\lambda={}$, $\mu={}|0.5$, dt={}, tr_s={}, te_s={}, mi={}, df=SFD, sc={}'.format(res['best_params']['optimizer__alpha'],
                                                                                                         res['best_params']['optimizer__threshold'],
                                                                                                         res['noise'],
                                                                                                         res['dt'],
                                                                                                         res['num_of_points'] - res['test_size'],
                                                                                                         res['test_size'],
                                                                                                         res['max_iter'],
                                                                                                         round(res['best_score'],4))
    make_lissajou(5, x_train, x_test, x_train_pred, x_test_pred, title)

    #make_3d_plots(x_test, x_test_pred, 'lorenz05')

# ConsSR3 trajs and lissajou
if False:

    #estimator_path = "data/L05_2_{'N': 20, 'K': 2, 'F': 30}/Trained_models_cov_off_diag_0/L05_2_SINDy_ConsSR3_search_{'N': 20, 'K': 2, 'F': 30}_predefined_split_{'mu': 0, 'dt': 0.01, 'test_size': 300, 'all_point': 4900, 'max_it': 20, 'df': 'SFD'}_acd3e95f81a0c0e6f2ecc20d34d689d6c794581b.pkl"
    #estimator_path = "data/L05_2_{'N': 20, 'K': 2, 'F': 30}/Trained_models_cov_off_diag_0/L05_2_SINDy_ConsSR3_search_{'N': 20, 'K': 2, 'F': 30}_predefined_split_{'mu': 0.5, 'dt': 0.01, 'test_size': 300, 'all_point': 4900, 'max_it': 20, 'df': 'SFD'}_4144a6adf539e455c9bc20076ad3e79e276b4da2.pkl"
    #estimator_path = "data/L05_2_{'N': 20, 'K': 2, 'F': 30}/Trained_models_cov_off_diag_0/L05_2_SINDy_ConsSR3_search_{'N': 20, 'K': 2, 'F': 30}_predefined_split_{'mu': 1, 'dt': 0.01, 'test_size': 300, 'all_point': 4900, 'max_it': 20, 'df': 'SFD'}_8dac0ae2a2f7aff9c0def393328b6408cff92151.pkl"

    #estimator_path = "data/L05_2_{'N': 20, 'K': 2, 'F': 30}/Trained_models_cov_off_diag_0/L05_2_SINDy_ConsSR3_search_{'N': 20, 'K': 2, 'F': 30}_predefined_split_{'mu': 0, 'dt': 0.01, 'test_size': 300, 'all_point': 100000, 'max_it': 20, 'df': 'SFD'}_e709036311712e58017761816b57d6f0e30dd64d.pkl"
    #estimator_path = "data/L05_2_{'N': 20, 'K': 2, 'F': 30}/Trained_models_cov_off_diag_0/L05_2_SINDy_ConsSR3_search_{'N': 20, 'K': 2, 'F': 30}_predefined_split_{'mu': 0.5, 'dt': 0.01, 'test_size': 300, 'all_point': 100000, 'max_it': 20, 'df': 'SFD'}_0aa3e43342ddf0ce59d5d5298d0a3fcbbb079b6f.pkl"
    #estimator_path = "data/L05_2_{'N': 20, 'K': 2, 'F': 30}/Trained_models_cov_off_diag_0/L05_2_SINDy_ConsSR3_search_{'N': 20, 'K': 2, 'F': 30}_predefined_split_{'mu': 1, 'dt': 0.01, 'test_size': 300, 'all_point': 100000, 'max_it': 20, 'df': 'SFD'}_3e800f800947efb69a6b82fce1c49229c729ef24.pkl"

    estimator_path = "data/L05_2_{'N': 20, 'K': 2, 'F': 30}/Trained_models_cov_off_diag_0.5/L05_2_SINDy_ConsSR3_search_{'N': 20, 'K': 2, 'F': 30}_predefined_split_{'mu': 0.5, 'dt': 0.01, 'test_size': 300, 'all_point': 4500, 'max_it': 20, 'df': 'SFD'}_cc28334e92fbc2020d6adc73a4d174cd5c0df927.pkl"
    estimator_path = "data/L05_2_{'N': 20, 'K': 2, 'F': 30}/Trained_models_cov_off_diag_0.5/L05_2_SINDy_ConsSR3_search_{'N': 20, 'K': 2, 'F': 30}_predefined_split_{'mu': 1, 'dt': 0.01, 'test_size': 300, 'all_point': 4500, 'max_it': 20, 'df': 'SFD'}_1cb25185082cafeef884ef87bb8424c0ab133e15.pkl"

    with open(estimator_path, 'rb') as inp:
        res = pickle.load(inp) # Lorenz_model_3_evaluated
        model = res['best_est']
        for key, val in res.items():
            if key != 'cv_results' and key != 'x':
                print(key, ' : ', val)
        print('ODE:')
        model.print()
        #print(model.coefficients())

    num_of_test_points = res['test_size']
    num_of_train_points = len(res['x']) - num_of_test_points

    # make predictions
    n_targets = pars['N']
    dt = res['dt']
    Xi = model.coefficients().T

    t_test = np.arange(0, num_of_test_points) * dt
    t_train = np.arange(0, num_of_train_points) * dt

    x_test = res['x'][-num_of_test_points:]
    xdot_test = model.differentiate(x_test, t=t_test)
    x_train = res['x'][:num_of_train_points]

    x_og_test = res['x_og'][-num_of_test_points:]
    xdot_og_test = model.differentiate(x_og_test, t=t_test)
    x_og_train = res['x_og'][:num_of_train_points]

    x_test_pred = model.simulate(x_test[0, :], t_test, integrator_kws=integrator_keywords)
    xdot_test_pred = model.predict(x_test)
    x_train_pred = model.simulate(x_train[0, :], t_train, integrator_kws=integrator_keywords)

    E_pred = np.linalg.norm(x_test - x_test_pred) / np.linalg.norm(x_test)

    # plotting and analysis
    title = 'ConsSR3, Model predictions of first 3 components (first {} points of test set)\n'.format(num_of_test_points) + \
            r'$\nu={}$, $\lambda={}$, $\mu={}|0.5$, dt={}, tr_s={}, te_s={},  mi={}, df=SFD, sc={}'.format(res['best_params']['optimizer__nu'],
                                                                                                res['best_params']['optimizer__threshold'],
                                                                                                res['noise'],
                                                                                                res['dt'],
                                                                                                res['num_of_points']-res['test_size'],
                                                                                                res['test_size'],
                                                                                                res['max_iter'],
                                                                                                round(res['best_score'],4))
    make_fits(5, t_test, xdot_test, xdot_og_test, xdot_test_pred, x_test, x_og_test, x_test_pred, title)
    title = 'ConsSR3, Model vs. original Lissajou plots of first 4 components\n' + \
            r'$\nu={}$, $\lambda={}$, $\mu={}|0.5$, dt={}, tr_s={}, te_s={}, mi={}, df=SFD, sc={}'.format(res['best_params']['optimizer__nu'],
                                                                                                res['best_params']['optimizer__threshold'],
                                                                                                res['noise'],
                                                                                                res['dt'],
                                                                                                res['num_of_points'] - res['test_size'],
                                                                                                res['test_size'],
                                                                                                res['max_iter'],
                                                                                                round(res['best_score'],4))
    make_lissajou(5, x_train, x_test, x_train_pred, x_test_pred, title)

    #make_3d_plots(x_test, x_test_pred, 'lorenz05')

# TrapSR3 trajs and lissajou
if False:

    #estimator_path = "data/L05_2_{'N': 20, 'K': 2, 'F': 30}/Trained_models/L05_2_SINDy_TrapSR3_search_{'N': 20, 'K': 2, 'F': 30}_predefined_split_eta=1_{'mu': 0, 'dt': 0.01, 'test_size': 300, 'all_point': 4900, 'max_it': 5, 'df': 'SFD'}_acd3e95f81a0c0e6f2ecc20d34d689d6c794581b.pkl"
    #estimator_path = "data/L05_2_{'N': 20, 'K': 2, 'F': 30}/Trained_models/L05_2_SINDy_TrapSR3_search_{'N': 20, 'K': 2, 'F': 30}_predefined_split_eta=1_{'mu': 0.5, 'dt': 0.01, 'test_size': 300, 'all_point': 4900, 'max_it': 20, 'df': 'SFD'}_4144a6adf539e455c9bc20076ad3e79e276b4da2.pkl"
    #estimator_path = "data/L05_2_{'N': 20, 'K': 2, 'F': 30}/Trained_models/L05_2_SINDy_TrapSR3_search_{'N': 20, 'K': 2, 'F': 30}_predefined_split_eta=1_{'mu': 1, 'dt': 0.01, 'test_size': 300, 'all_point': 4900, 'max_it': 20, 'df': 'SFD'}_8dac0ae2a2f7aff9c0def393328b6408cff92151.pkl"

    estimator_path = "data/L05_2_{'N': 20, 'K': 2, 'F': 30}/Trained_models_cov_off_diag_0.5/L05_2_SINDy_TrapSR3_search_{'N': 20, 'K': 2, 'F': 30}_predefined_split_eta=1_{'mu': 0.5, 'dt': 0.01, 'test_size': 300, 'all_point': 4500, 'max_it': 20, 'df': 'SFD'}_cc28334e92fbc2020d6adc73a4d174cd5c0df927.pkl"
    estimator_path = "data/L05_2_{'N': 20, 'K': 2, 'F': 30}/Trained_models_cov_off_diag_0.5/L05_2_SINDy_TrapSR3_search_{'N': 20, 'K': 2, 'F': 30}_predefined_split_eta=1_{'mu': 1, 'dt': 0.01, 'test_size': 300, 'all_point': 4500, 'max_it': 20, 'df': 'SFD'}_1cb25185082cafeef884ef87bb8424c0ab133e15.pkl"

    with open(estimator_path, 'rb') as inp:
        res = pickle.load(inp) # Lorenz_model_3_evaluated
        model = res['best_est']
        for key, val in res.items():
            if key != 'cv_results' and key != 'x':
                print(key, ' : ', val)
        print('ODE:')
        model.print()
        #print(model.coefficients())

    num_of_test_points = res['test_size']
    num_of_train_points = len(res['x']) - num_of_test_points

    # make predictions
    n_targets = pars['N']
    dt = res['dt']
    Xi = model.coefficients().T

    t_test = np.arange(0, num_of_test_points) * dt
    t_train = np.arange(0, num_of_train_points) * dt

    x_test = res['x'][-num_of_test_points:]
    xdot_test = model.differentiate(x_test, t=t_test)
    x_train = res['x'][:num_of_train_points]

    x_og_test = res['x_og'][-num_of_test_points:]
    xdot_og_test = model.differentiate(x_og_test, t=t_test)
    x_og_train = res['x_og'][:num_of_train_points]

    x_test_pred = model.simulate(x_test[0, :], t_test, integrator_kws=integrator_keywords)
    xdot_test_pred = model.predict(x_test)
    x_train_pred = model.simulate(x_train[0, :], t_train, integrator_kws=integrator_keywords)

    E_pred = np.linalg.norm(x_test - x_test_pred) / np.linalg.norm(x_test)

    # plotting and analysis
    title = 'TrapSR3, Model predictions of first 3 components (first {} points of test set)\n'.format(num_of_test_points) + \
            r'$\eta={}$, $\gamma={}$, $\lambda={}$, $\mu={}|0.5$, dt={}, tr_s={}, te_s={}, mi={}, df=SFD, sc={}'.format(res['eta'],
                                                                                                                    res['best_params']['optimizer__gamma'],
                                                                                                                    res['best_params']['optimizer__threshold'],
                                                                                                                    res['noise'],
                                                                                                                    res['dt'],
                                                                                                                    res['num_of_points'] - res['test_size'],
                                                                                                                    res['test_size'],
                                                                                                                    res['max_iter'],
                                                                                                                    round(res['best_score'],4))
    make_fits(5, t_test, xdot_test, xdot_og_test, xdot_test_pred, x_test, x_og_test, x_test_pred, title)
    title = 'TrapSR3, Model vs. original Lissajou plots of first 4 components\n' + \
            r'$\eta={}$, $\gamma={}$, $\lambda={}$, $\mu={}|0.5$, dt={}, tr_s={}, te_s={}, mi={}, df=SFD, sc={}'.format(res['eta'],
                                                                                                                    res['best_params']['optimizer__gamma'],
                                                                                                                    res['best_params']['optimizer__threshold'],
                                                                                                                    res['noise'],
                                                                                                                    res['dt'],
                                                                                                                    res['num_of_points'] - res['test_size'],
                                                                                                                    res['test_size'],
                                                                                                                    res['max_iter'],
                                                                                                                    round(res['best_score'],4))
    make_lissajou(5, x_train, x_test, x_train_pred, x_test_pred, title)

    #make_3d_plots(x_test, x_test_pred, 'lorenz05')

####################### Surrogate dynamic anal. #############################################

if False:

    fig = plt.figure(figsize=(10, 5)).gca()

    filenames = [
        # offdiag=0

        "L05_2_SINDy_STLSQ_search_{'N': 20, 'K': 2, 'F': 30}_predefined_split_{'mu': 0, 'dt': 0.01, 'test_size': 300, 'all_point': 4900, 'max_it': 20, 'df': 'SFD'}_5120447993576d598cbd96ecf00f8b3e226a1b3f",
        "L05_2_SINDy_ConsSR3_search_{'N': 20, 'K': 2, 'F': 30}_predefined_split_{'mu': 0, 'dt': 0.01, 'test_size': 300, 'all_point': 4900, 'max_it': 20, 'df': 'SFD'}_acd3e95f81a0c0e6f2ecc20d34d689d6c794581b",
        "L05_2_SINDy_TrapSR3_search_{'N': 20, 'K': 2, 'F': 30}_predefined_split_eta=1_{'mu': 0, 'dt': 0.01, 'test_size': 300, 'all_point': 4900, 'max_it': 5, 'df': 'SFD'}_acd3e95f81a0c0e6f2ecc20d34d689d6c794581b",
        #
        "L05_2_SINDy_STLSQ_search_{'N': 20, 'K': 2, 'F': 30}_predefined_split_{'mu': 0.5, 'dt': 0.01, 'test_size': 300, 'all_point': 4900, 'max_it': 20, 'df': 'SFD'}_4144a6adf539e455c9bc20076ad3e79e276b4da2",
        "L05_2_SINDy_ConsSR3_search_{'N': 20, 'K': 2, 'F': 30}_predefined_split_{'mu': 0.5, 'dt': 0.01, 'test_size': 300, 'all_point': 4900, 'max_it': 20, 'df': 'SFD'}_4144a6adf539e455c9bc20076ad3e79e276b4da2",
        # TrapSR3 mu=0.5 didnt converge

        "L05_2_SINDy_STLSQ_search_{'N': 20, 'K': 2, 'F': 30}_predefined_split_{'mu': 1, 'dt': 0.01, 'test_size': 300, 'all_point': 4900, 'max_it': 20, 'df': 'SFD'}_96c15d7ae8248de632be7ff2fdbc17721667edaf",
        "L05_2_SINDy_ConsSR3_search_{'N': 20, 'K': 2, 'F': 30}_predefined_split_{'mu': 1, 'dt': 0.01, 'test_size': 300, 'all_point': 4900, 'max_it': 20, 'df': 'SFD'}_8dac0ae2a2f7aff9c0def393328b6408cff92151",
        # TrapSR3 mu=1 diverges



        # offdiag=0.5

        "L05_2_SINDy_STLSQ_search_{'N': 20, 'K': 2, 'F': 30}_predefined_split_{'mu': 0.5, 'dt': 0.01, 'test_size': 300, 'all_point': 4500, 'max_it': 20, 'df': 'SFD'}_cc28334e92fbc2020d6adc73a4d174cd5c0df927",
        #STLSQ mu=1 diverges

        "L05_2_SINDy_ConsSR3_search_{'N': 20, 'K': 2, 'F': 30}_predefined_split_{'mu': 0.5, 'dt': 0.01, 'test_size': 300, 'all_point': 4500, 'max_it': 20, 'df': 'SFD'}_cc28334e92fbc2020d6adc73a4d174cd5c0df927",
        "L05_2_SINDy_ConsSR3_search_{'N': 20, 'K': 2, 'F': 30}_predefined_split_{'mu': 1, 'dt': 0.01, 'test_size': 300, 'all_point': 4500, 'max_it': 20, 'df': 'SFD'}_1cb25185082cafeef884ef87bb8424c0ab133e15",

        #TrapSR3 mu=0.5 diverges
        #TrapSR3 mu=0.5 diverges
    ]

    labs = [
        r"STLSQ, $\mu=0$, $\alpha=0.1$, $\lambda=0.01$",
        r"ConsSR3, $\mu=0$, $\nu=0.01$, $\lambda=0.01$",
        r"TrapSR3, $\mu=0$, $\eta=1$, $\gamma=-0.01$, $\lambda=0.01$",

        r"STLSQ, $\mu=0.5$, $\alpha=0.001$, $\lambda=0.01$",
        r"ConsSR3, $\mu=0.5$, $\nu=0.01$, $\lambda=0.001$",

        r"STLSQ, $\mu=1$, $\alpha=0.1$, $\lambda=0.01$",
        r"ConsSR3, $\mu=1$, $\nu=0.01$, $\lambda=0.001$",

        r"STLSQ, $\mu=0|0.5$, $\alpha=0.01$, $\lambda=0.01$",
        r"ConsSR3, $\mu=0.5|0.5$, $\nu=0.01$, $\lambda=0.001$",
        r"ConsSR3, $\mu=1|0.5$, $\nu=0.01$, $\lambda=0.001$",

    ]

    colors =  ['tab:blue', 'tab:orange', 'tab:green', 'tab:red', 'tab:purple', 'tab:brown', 'tab:pink', 'tab:gray', 'tab:olive', 'tab:cyan']

    c = 0
    for filename in filenames:
        c = c + 1

        print(
            "\n--------------------------------------------------------------------------------------------------------")
        print(filename)
        print(
            "--------------------------------------------------------------------------------------------------------\n")


        if c <= 7:
            model_name = "data/L05_2_{'N': 20, 'K': 2, 'F': 30}/Trained_models_cov_off_diag_0/sur/sur_" + filename + '/sur_' + filename + ".pkl"
        else:
            model_name = "data/L05_2_{'N': 20, 'K': 2, 'F': 30}/Trained_models_cov_off_diag_0.5/sur/sur_" + filename + '/sur_' + filename + ".pkl"

        with open(model_name, 'rb') as L05_2_inp:
            L = pickle.load(L05_2_inp)  # Lorenz_model_3_evaluated
            del L05_2_inp

        L.print_parameters()

        # # plot moments
        # pm = L.moments[-1]
        # plt.semilogx(pm['k_arr'], pm['mom_arr'], label=labs[c-1])

        # # plot psd
        # ps = L.PSD[-1]
        # plt.loglog(ps['freqs'], ps['psd'], label=labs[c-1], linewidth='0.99')

        # plot lyapunov spectrum
        ly = L.lyapunov_spectrum[-1]
        plt.plot([i for i in range(20)], ly['lyapunov exponents'], color=colors[c-1])
        plt.errorbar([i for i in range(20)], ly['lyapunov exponents'], yerr=ly['lyapunov std'], capsize=2, lw=1, label=labs[c-1] + r', $<\delta_{stop}>=$' + str(round(ly['average of log10(delta_stop)'],2)), color=colors[c-1])

    # plot moments
    if False:
        k_arr = [0.01      , 0.01047616, 0.01097499, 0.01149757, 0.01204504,
           0.01261857, 0.01321941, 0.01384886, 0.01450829, 0.01519911,
           0.01592283, 0.01668101, 0.01747528, 0.01830738, 0.0191791 ,
           0.02009233, 0.02104904, 0.02205131, 0.0231013 , 0.02420128,
           0.02535364, 0.02656088, 0.02782559, 0.02915053, 0.03053856,
           0.03199267, 0.03351603, 0.03511192, 0.0367838 , 0.03853529,
           0.04037017, 0.04229243, 0.04430621, 0.04641589, 0.04862602,
           0.05094138, 0.05336699, 0.0559081 , 0.05857021, 0.06135907,
           0.06428073, 0.06734151, 0.07054802, 0.07390722, 0.07742637,
           0.08111308, 0.08497534, 0.08902151, 0.09326033, 0.097701  ,
           0.1023531 , 0.10722672, 0.1123324 , 0.1176812 , 0.12328467,
           0.12915497, 0.13530478, 0.14174742, 0.14849683, 0.15556761,
           0.16297508, 0.17073526, 0.17886495, 0.18738174, 0.19630407,
           0.20565123, 0.21544347, 0.22570197, 0.23644894, 0.24770764,
           0.25950242, 0.27185882, 0.28480359, 0.29836472, 0.31257158,
           0.32745492, 0.34304693, 0.35938137, 0.37649358, 0.39442061,
           0.41320124, 0.43287613, 0.45348785, 0.47508102, 0.49770236,
           0.52140083, 0.54622772, 0.57223677, 0.59948425, 0.62802914,
           0.65793322, 0.68926121, 0.7220809 , 0.75646333, 0.7924829 ,
           0.83021757, 0.869749  , 0.91116276, 0.95454846, 1.        ]
        mom_arr = [9.95279930e-01, 9.94820892e-01, 9.94317336e-01, 9.93764970e-01,
                          9.93159093e-01, 9.92494558e-01, 9.91765730e-01, 9.90966443e-01,
                          9.90089948e-01, 9.89128867e-01, 9.88075127e-01, 9.86919908e-01,
                          9.85653571e-01, 9.84265591e-01, 9.82744477e-01, 9.81077693e-01,
                          9.79251571e-01, 9.77251218e-01, 9.75060416e-01, 9.72661525e-01,
                          9.70035366e-01, 9.67161115e-01, 9.64016184e-01, 9.60576102e-01,
                          9.56814392e-01, 9.52702452e-01, 9.48209437e-01, 9.43302141e-01,
                          9.37944900e-01, 9.32099491e-01, 9.25725064e-01, 9.18778089e-01,
                          9.11212342e-01, 9.02978920e-01, 8.94026325e-01, 8.84300595e-01,
                          8.73745521e-01, 8.62302956e-01, 8.49913237e-01, 8.36515740e-01,
                          8.22049581e-01, 8.06454506e-01, 7.89671976e-01, 7.71646478e-01,
                          7.52327085e-01, 7.31669285e-01, 7.09637097e-01, 6.86205464e-01,
                          6.61362940e-01, 6.35114628e-01, 6.07485332e-01, 5.78522844e-01,
                          5.48301262e-01, 5.16924178e-01, 4.84527545e-01, 4.51281975e-01,
                          4.17394164e-01, 3.83107100e-01, 3.48698689e-01, 3.14478402e-01,
                          2.80781608e-01, 2.47961311e-01, 2.16377173e-01, 1.86381925e-01,
                          1.58305567e-01, 1.32438153e-01, 1.09012358e-01, 8.81874572e-02,
                          7.00366861e-02, 5.45400531e-02, 4.15845361e-02, 3.09729703e-02,
                          2.24418725e-02, 1.56869516e-02, 1.03933430e-02, 6.26605869e-03,
                          3.05528411e-03, 5.71507238e-04, -1.31262795e-03, -2.67354958e-03,
                          -3.55699235e-03, -4.00015512e-03, -4.04817068e-03, -3.76012357e-03,
                          -3.20530237e-03, -2.45569397e-03, -1.58230055e-03, -6.58703373e-04,
                          2.32446085e-04, 9.99554036e-04, 1.55549274e-03, 1.84097671e-03,
                          1.84603506e-03, 1.61824981e-03, 1.25363882e-03, 8.71315116e-04,
                          5.75194641e-04, 4.11517989e-04, 3.41561546e-04, 2.62317058e-04]
        plt.semilogx(k_arr, mom_arr, '--', label='original', color='k')

        plt.title(r'N=20, K=2, F=30, $dt=0.01$, $t_{stop}=10^3$')
        plt.xlabel('k')
        plt.ylabel(r'$<Re[e^{ikx}]>$')
        # plt.tight_layout()
        plt.legend(bbox_to_anchor=(1,1), loc="upper left")
        plt.subplots_adjust(bottom=0.12, right=0.55, left=0.1, top=0.9)
        plt.grid(True)
        plt.show()

    # plot psd
    if False:

        plt.loglog(freqs1, psd1, label=r'original', linewidth='2', color='k', linestyle='--', zorder=100)

        plt.title('PSD: N={},K={},F={}'.format(N, K, F) + r', $t_{stop}=10^3$')
        plt.xlabel('Frequency')
        plt.ylabel('Power')
        #plt.tight_layout()
        plt.legend()
        plt.grid(True)
        plt.show()

    if True:
        res = {'init_cond': [-17.16677811,   2.77684494,   5.32918288,   4.06720654,
        -4.50697691,   5.28285585,   0.25784428,   5.83645619,
        16.70014973,   4.11380002,  -1.95477235,  -5.53403114,
        -2.23405133,  11.30964113,  -7.40045119,   8.4124894 ,
        22.06908642,  13.63659989,  16.6942645 ,  -7.06811886], 'renormalization time': 4, 'max iteration number': 100, 'delta_start': 1e-08, 'average of log10(delta_stop)': -3.7310480325008886, 'lyapunov exponents': [2.6178394922826973, 1.27472122414315, 0.7607420508879335, 0.35744280535963574, 0.05833119712670215, -0.164162415401803, -0.32955435310527065, -0.474257467369752, -0.6173651576571889, -0.7281083835126851, -0.8116212918890069, -0.9013473699780823, -0.9849835069601338, -1.049042352770446, -1.112554059330677, -1.1821716227353218, -1.2579996496956032, -1.3276846821887507, -1.4327494897282356, -1.5933243911501387], 'lyapunov std': [0.49692294364471146, 0.3901768117536984, 0.2977174717983585, 0.27540023288917587, 0.2596391849725437, 0.21667262166439658, 0.22037549003547777, 0.23392286647970845, 0.23432107293160043, 0.24436130574843404, 0.25966807191367436, 0.275198759530675, 0.28314063729401495, 0.2868137757279443, 0.29452918513515974, 0.29025793496180036, 0.2943707255395479, 0.2992797934048661, 0.30993034841361594, 0.36225143551336797]}


        plt.plot([i for i in range(20)], res['lyapunov exponents'], c='k', linestyle='--')
        plt.errorbar([i for i in range(20)], res['lyapunov exponents'], yerr=res['lyapunov std'], capsize=2, c='k', linestyle='--', label='original' + r', $<\delta_{stop}>=$' + str(round(res['average of log10(delta_stop)'],2)))

        plt.xlabel('i')
        plt.ylabel(r'$\lambda_{i}$')
        plt.legend(fontsize=10, loc=(0.5,0.35))
        plt.title(r'$t_{stop}=4$, ss=10                                        ', fontsize=13)
        plt.grid(True)
        fig.xaxis.set_major_locator(MaxNLocator(integer=True))
        plt.show()